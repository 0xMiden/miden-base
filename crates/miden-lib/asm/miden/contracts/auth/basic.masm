use.miden::account
use.miden::tx
use.std::crypto::hashes::rpo
use.std::crypto::dsa::rpo_falcon512

# CONSTANTS
# =================================================================================================

# The event to request an authentication signature.
const.AUTH_REQUEST=131087

# The slot in this component's storage layout where the public key is stored.
const.PUBLIC_KEY_SLOT=0

#! Authenticate a transaction using the Falcon signature scheme.
#!
#! It first increments the nonce of the account, independent of whether the account's state has
#! changed or not. Then it computes and signs the following message (in memory order):
#! [ACCOUNT_DELTA_COMMITMENT, INPUT_NOTES_COMMITMENT,
#!  OUTPUT_NOTES_COMMITMENT, [0, 0, ref_block_num, final_nonce]]
#!
#! Including the final_nonce is necessary for replay protection. The reference block number is
#! included to commit to the transaction creator's intended reference block of the transaction
#! which determines the fee parameters and therefore the fee amount that is deducted.
#!
#! Inputs:  [AUTH_ARGS, pad(12)]
#! Outputs: [pad(16)]
#!
#! Invocation: call
export.auth__tx_rpo_falcon512
    # drop auth args
    dropw
    # => [pad(16)]

    # Increment the account's nonce.
    # ---------------------------------------------------------------------------------------------

    # this has to happen before computing the delta commitment, otherwise that procedure will abort
    exec.account::incr_nonce
    # => [pad(16)]

    # Compute the message that is signed.
    # ---------------------------------------------------------------------------------------------

    exec.create_tx_summary
    # => [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT, SALT, OUTPUT_NOTES_COMMITMENT, pad(16)]

    # the commitment to the tx summary is the message that is signed
    exec.hash_tx_summary
    # => [MESSAGE, pad(16)]

    # Fetch public key from storage.
    # ---------------------------------------------------------------------------------------------

    # Get public key from account storage at pos 0 and verify signature
    push.PUBLIC_KEY_SLOT exec.account::get_item
    # OS => [PUB_KEY, MESSAGE, pad(16)]
    # AS => []

    # Fetch signature from advice provider and verify.
    # ---------------------------------------------------------------------------------------------

    # emit the authentication request event that pushes a signature for the message to the advice
    # stack
    emit.AUTH_REQUEST
    # OS => [PUB_KEY, MESSAGE, pad(16)]
    # AS => [SIGNATURE]

    # Verify the signature against the public key and the message. The procedure gets as inputs the
    # hash of the public key and the message via the operand stack. The signature is provided via
    # the advice stack. The signature is valid if and only if the procedure returns.
    exec.rpo_falcon512::verify
    # OS => [pad(16)]
    # AS => []
end

#! Creates the transaction summary and returns it in the order in which it is hashed.
#!
#! Inputs:  []
#! Outputs: [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT, SALT, OUTPUT_NOTES_COMMITMENT]
proc.create_tx_summary
    # get the commitment to the output notes
    exec.tx::get_output_notes_commitment
    # => [OUTPUT_NOTES_COMMITMENT]

    push.0.0 exec.tx::get_block_number exec.account::get_nonce
    # => [[final_nonce, ref_block_num, 0, 0], OUTPUT_NOTES_COMMITMENT]
    # => [SALT, OUTPUT_NOTES_COMMITMENT]

    exec.account::compute_delta_commitment
    # => [ACCOUNT_DELTA_COMMITMENT, SALT, OUTPUT_NOTES_COMMITMENT]

    exec.tx::get_input_notes_commitment
    # => [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT, SALT, OUTPUT_NOTES_COMMITMENT]
end

#! Hashes the provided transaction summary and returns its commitment.
#!
#! Inputs:  [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT, SALT, OUTPUT_NOTES_COMMITMENT]
#! Outputs: [TX_SUMMARY_COMMITMENT]
proc.hash_tx_summary
    # pad capacity element of the hasher
    padw movdnw.2
    # => [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT, CAPACITY, SALT, OUTPUT_NOTES_COMMITMENT]

    hperm
    # => [RATE, RATE, PERM, SALT, OUTPUT_NOTES_COMMITMENT]

    # drop rate words
    dropw dropw
    # => [PERM, SALT, OUTPUT_NOTES_COMMITMENT]

    movdnw.2
    # => [SALT, OUTPUT_NOTES_COMMITMENT, PERM]

    hperm
    # => [RATE, RATE, PERM]

    exec.rpo::squeeze_digest
    # => [TX_SUMMARY_COMMITMENT]
end