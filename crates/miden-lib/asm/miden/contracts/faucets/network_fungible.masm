use.miden::account
use.miden::account_id
use.miden::active_note
use.miden::contracts::faucets::basic_fungible

# CONSTANTS
# ================================================================================================

# The slot in this component's storage layout where the owner config is stored.
const.OWNER_CONFIG_SLOT=1

# ERRORS
const.ERR_NOT_OWNER="note sender is not owner"

#! Checks if the note sender is the owner of this faucet.
#!
#! Inputs:  []
#! Outputs: [is_owner]
#!
#! Where:
#! - is_owner is 1 if the sender is the owner, 0 otherwise.
proc.is_owner
    push.OWNER_CONFIG_SLOT
    # => [owner_config_slot]

    exec.account::get_item
    # => [owner_suffix, owner_prefix, 0, 0]

    exec.active_note::get_sender
    # => [sender_suffix, sender_prefix, owner_suffix, owner_prefix, 0, 0]

    exec.account_id::is_equal
    # => [are_equal, 0, 0]

    swap drop swap drop
    # => [is_owner]
end

#! Distributes freshly minted fungible assets to the provided recipient.
#!
#! This procedure first checks if the note sender is the owner of the faucet, then delegates
#! to the basic_fungible::distribute procedure to handle the actual minting and distribution.
#!
#! Inputs:  [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]
#! Outputs: [note_idx, pad(15)]
#!
#! Where:
#! - amount is the amount to be minted and sent.
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary data to be included in the note.
#! - note_type is the type of the note that holds the asset.
#! - execution_hint is the execution hint of the note that holds the asset.
#! - RECIPIENT is the recipient of the asset.
#! - note_idx is the index of the output note.
#!
#! Panics if:
#! - the note sender is not the owner of this faucet.
#! - any of the validations in basic_fungible::distribute fail.
export.distribute
    exec.is_owner
    # => [is_owner, amount, tag, aux, note_type, execution_hint, RECIPIENT]

    assert.err=ERR_NOT_OWNER
    # => [amount, tag, aux, note_type, execution_hint, RECIPIENT]

    exec.basic_fungible::distribute
    # => [note_idx]
end

#! Burns the fungible asset from the active note.
#!
#! This procedure retrieves the asset from the active note and burns it. The note must contain
#! exactly one asset, which must be a fungible asset issued by this faucet.
#!
#! This is a re-export of basic_fungible::burn since both procedures now have identical
#! functionality.
#!
#! Inputs:  []
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the fungible asset that was burned.
#!
#! Panics if:
#! - the procedure is not called from a note context (active_note::get_assets will fail).
#! - the note does not contain exactly one asset.
#! - the transaction is executed against an account which is not a fungible asset faucet.
#! - the transaction is executed against a faucet which is not the origin of the specified asset.
#! - the amount about to be burned is greater than the outstanding supply of the asset.
export.basic_fungible::burn
