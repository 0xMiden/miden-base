# BASIC FUNGIBLE FAUCET CONTRACT
# =================================================================================================
# This is a basic fungible faucet smart contract.
#
# It allows the owner of the faucet to mint, distribute, and burn tokens. Token metadata is stored
# in account storage at position 1 as [max_supply, decimals, token_symbol, 0], where:
# - max_supply is the maximum supply of the token.
# - decimals are the decimals of the token.
# - token_symbol as three chars encoded in a Felt.

use.miden::account
use.miden::active_note
use.miden::faucet
use.miden::output_note

# CONSTANTS
# =================================================================================================
const.PRIVATE_NOTE=2

# ERRORS
# =================================================================================================

const.ERR_FUNGIBLE_ASSET_DISTRIBUTE_WOULD_CAUSE_MAX_SUPPLY_TO_BE_EXCEEDED="distribute would cause the maximum supply to be exceeded"

const.ERR_BASIC_FUNGIBLE_BURN_WRONG_NUMBER_OF_ASSETS="burn requires exactly 1 note asset"

# CONSTANTS
# =================================================================================================

# The slot in this component's storage layout where the metadata is stored.
const.METADATA_SLOT=0

#! Distributes freshly minted fungible assets to the provided recipient.
#!
#! Inputs:  [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]
#! Outputs: [note_idx, pad(15)]
#!
#! Where:
#! - amount is the amount to be minted and sent.
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary data to be included in the note.
#! - note_type is the type of the note that holds the asset.
#! - execution_hint is the execution hint of the note that holds the asset.
#! - RECIPIENT is the recipient of the asset, i.e.,
#!   hash(hash(hash(serial_num, [0; 4]), script_root), input_commitment).
#! - note_idx is the index of the output note.
#!   This cannot directly be accessed from another context.
#!
#! Panics if:
#! - the transaction is being executed against an account that is not a fungible asset faucet.
#! - the total issuance after minting is greater than the maximum allowed supply.
#!
#! Invocation: call
export.distribute.4
    # get max supply of this faucet. We assume it is stored at pos 3 of slot 1
    push.METADATA_SLOT exec.account::get_item drop drop drop
    # => [max_supply, amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # get total issuance of this faucet so far and add amount to be minted
    exec.faucet::get_total_issuance
    # => [total_issuance, max_supply, amount, tag, aux, note_type, execution_hint, RECIPIENT,
    #     pad(7)]

    # compute maximum amount that can be minted, max_mint_amount = max_supply - total_issuance
    sub
    # => [max_supply - total_issuance, amount, tag, aux, note_type, execution_hint, RECIPIENT,
    #     pad(7)]

    # check that amount =< max_supply - total_issuance, fails if otherwise
    dup.1 gte assert.err=ERR_FUNGIBLE_ASSET_DISTRIBUTE_WOULD_CAUSE_MAX_SUPPLY_TO_BE_EXCEEDED
    # => [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # creating the asset
    exec.faucet::create_fungible_asset
    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # mint the asset; this is needed to satisfy asset preservation logic.
    exec.faucet::mint
    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # store and drop the ASSET
    loc_storew.0 dropw
    # => [tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # create a note
    exec.output_note::create
    # => [note_idx, pad(15)]

    # load the ASSET and add it to the note
    movdn.4 loc_loadw.0 exec.output_note::add_asset movup.4
    # => [note_idx, ASSET, pad(11)]
end

#! Burns the fungible asset from the active note.
#!
#! This procedure retrieves the asset from the active note and burns it. The note must contain
#! exactly one asset, which must be a fungible asset issued by this faucet.
#!
#! Inputs:  []
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the fungible asset that was burned.
#!
#! Panics if:
#! - the procedure is not called from a note context (active_note::get_assets will fail).
#! - the note does not contain exactly one asset.
#! - the transaction is executed against an account which is not a fungible asset faucet.
#! - the transaction is executed against a faucet which is not the origin of the specified asset.
#! - the amount about to be burned is greater than the outstanding supply of the asset.
#!
#! Invocation: call
export.burn
    # Get the assets from the note. This will fail if not called from a note context.
    push.0 exec.active_note::get_assets
    # => [num_assets, dest_ptr]

    # Verify we have exactly one asset
    assert.err=ERR_BASIC_FUNGIBLE_BURN_WRONG_NUMBER_OF_ASSETS
    # => [dest_ptr]

    mem_loadw
    # => [ASSET]

    # burning the asset
    exec.faucet::burn
    # => [ASSET]
end
