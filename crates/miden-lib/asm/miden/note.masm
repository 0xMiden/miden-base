use.std::crypto::hashes::rpo
use.std::mem

#Â ERRORS
# =================================================================================================

const.ERR_PROLOGUE_NOTE_INPUTS_LEN_EXCEEDED_LIMIT="number of note inputs exceeded the maximum limit of 128"

# NOTE UTILITY PROCEDURES
# =================================================================================================

#! Computes the commitment to the note inputs starting at the specified memory address.
#!
#! This procedure checks that the provided number of note inputs is within limits and then computes
#! the commitment.
#!
#! Notice that the note inputs are padded with zeros in case their number is not a multiple of 8.
#!
#! If the number of note inputs is 0, procedure returns the empty word: [0, 0, 0, 0].
#!
#! Inputs:  [inputs_ptr, num_inputs]
#! Outputs: [INPUTS_COMMITMENT]
#!
#! Cycles:
#! - If number of elements divides by 8: 56 cycles + 3 * words
#! - Else: 189 cycles + 3 * words
#!
#! Panics if:
#! - inputs_ptr is not word-aligned (i.e., is not a multiple of 4).
#! - num_inputs is greater than 128.
#!
#! Invocation: exec
export.compute_inputs_commitment
    # check that number of inputs is less than 128
    dup.1 push.128 u32assert2.err=ERR_PROLOGUE_NOTE_INPUTS_LEN_EXCEEDED_LIMIT
    u32lte assert.err=ERR_PROLOGUE_NOTE_INPUTS_LEN_EXCEEDED_LIMIT
    # => [inputs_ptr, num_inputs]

    # push 1 as the pad_inputs flag: we should pad the stack while computing the note inputs
    # commitment
    push.1 movdn.2
    # => [inputs_ptr, num_inputs, pad_inputs_flag]

    exec.rpo::prepare_hasher_state
    exec.rpo::hash_memory_with_state
    # => [INPUTS_COMMITMENT]
end

#! Returns the max allowed number of input values per note.
#!
#! Stack: []
#! Output: [max_inputs_per_note]
#!
#! - max_inputs_per_note is the max inputs per note.
export.::miden::util::note::get_max_inputs_per_note

#! Writes the assets data stored in the advice map to the memory specified by the provided 
#! destination pointer.
#!
#! Inputs:
#!   Operand stack: [ASSETS_COMMITMENT, num_assets, dest_ptr]
#!   Advice map: {
#!     ASSETS_COMMITMENT: [[ASSETS_DATA]]
#!   }
#! Outputs:
#!   Operand stack: [num_assets, dest_ptr]
export.write_assets_to_memory
    # load the asset data from the advice map to the advice stack
    adv.push_mapval
    # OS => [ASSETS_COMMITMENT, num_assets, dest_ptr]
    # AS => [[ASSETS_DATA]]

    # calculate number of assets rounded up to an even number
    dup.4 dup is_odd add
    # OS => [even_num_assets, ASSETS_COMMITMENT, num_assets, dest_ptr]
    # AS => [[ASSETS_DATA]]

    # prepare the stack for the `pipe_preimage_to_memory` procedure
    dup.6 swap
    # OS => [even_num_assets, dest_ptr, ASSETS_COMMITMENT, num_assets, dest_ptr]
    # AS => [[ASSETS_DATA]]

    # write the data from the advice stack into memory
    exec.mem::pipe_preimage_to_memory drop
    # OS => [num_assets, dest_ptr]
    # AS => []
end

#! Builds the recipient hash from note inputs, script root, and serial number.
#!
#! This procedure computes the commitment of the note inputs and then uses it to calculate the note
#! recipient by hashing this commit, the provided script root, and the serial number.
#!
#! Inputs:  [inputs_ptr, num_inputs, SERIAL_NUM, SCRIPT_ROOT]
#! Outputs: [RECIPIENT]
#!
#! Where:
#! - inputs_ptr is the memory address where the note inputs are stored.
#! - num_inputs is the number of input values.
#! - SCRIPT_ROOT is the script root of the note.
#! - SERIAL_NUM is the serial number of the note.
#! - RECIPIENT is the commitment to the input note's script, inputs, the serial number.
#!
#! Panics if:
#! - inputs_ptr is not word-aligned (i.e., is not a multiple of 4).
#! - num_inputs is greater than 128.
#!
#! Invocation: exec
export.build_recipient
    exec.compute_inputs_commitment
    # => [INPUTS_HASH, SERIAL_NUM, SCRIPT_ROOT]

    movdnw.2
    # => [SERIAL_NUM, SCRIPT_ROOT, INPUTS_HASH]

    exec.build_recipient_hash
    # => [RECIPIENT]
end

#! Returns the RECIPIENT for a specified SERIAL_NUM, SCRIPT_ROOT, and inputs commitment.
#!
#! Inputs:  [SERIAL_NUM, SCRIPT_ROOT, INPUT_COMMITMENT]
#! Outputs: [RECIPIENT]
#!
#! Where:
#! - SERIAL_NUM is the serial number of the recipient.
#! - SCRIPT_ROOT is the commitment of the note script.
#! - INPUT_COMMITMENT is the commitment of the note inputs.
#! - RECIPIENT is the recipient of the note.
#!
#! Invocation: exec
export.build_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_ROOT, INPUT_COMMITMENT]

    swapw hmerge
    # => [MERGE_SCRIPT, INPUT_COMMITMENT]

    swapw hmerge
    # [RECIPIENT]
end
