use.miden::account
use.miden::auth
use.miden::tx
use.std::crypto::dsa::rpo_falcon512
use.std::crypto::hashes::rpo
use.std::word

# CONSTANTS
# =================================================================================================

# Auth Request Constants

# The event to request an authentication signature.
const.AUTH_REQUEST=131087

# The event emitted when a signature is not found for a required signer.
const.UNAUTHORIZED_EVENT=131102

# Storage Layout Constants
#
# ┌─────────────────────────────┬──────────┬──────────────┐
# │    THRESHOLD & APPROVERS    │ PUB KEYS │ EXECUTED TXS │
# │           (slot)            │   (map)  │    (map)     │
# ├─────────────────────────────┼──────────┼──────────────┤
# │              0              │    1     │      2       │
# └─────────────────────────────┴──────────┴──────────────┘

# The slot in this component's storage layout where both the signature threshold
# and number of approvers are stored as [threshold, num_approvers, 0, 0].
# The threshold is guaranteed to be less than or equal to num_approvers.
const.THRESHOLD_CONFIG_SLOT=0

# The slot in this component's storage layout where the public keys map is stored.
# Map entries: [key_index, 0, 0, 0] => owner_public_key
const.PUBLIC_KEYS_MAP_SLOT=1

# The slot in this component's storage layout where executed transactions are stored.
# Map entries: transaction_message => [is_executed, 0, 0, 0]
const.EXECUTED_TXS_SLOT=2

# Memory Constants

# Local Memory Addresses
const.NUM_OF_APPROVERS_LOC=0
const.PUB_KEY_MAP_IDX_LOC=4
const.CURRENT_PK_LOC=8
const.SUCCESSFUL_VERIFICATIONS_LOC=12

# Executed Transaction Flag Constant
const.IS_EXECUTED_FLAG=[1, 0, 0, 0]

# ERRORS
const.ERR_TX_ALREADY_EXECUTED="failed to approve multisig transaction as it was already executed"

#! Check if transaction has already been executed and add it to executed transactions for replay protection.
#!
#! Inputs:  [MSG]
#! Outputs: []
#!
#! Panics if:
#! - the same transaction has already been executed
proc.assert_new_tx
    push.IS_EXECUTED_FLAG
    # => [[0, 0, 0, is_executed], MSG]

    swapw
    # => [MSG, IS_EXECUTED_FLAG]

    push.EXECUTED_TXS_SLOT
    # => [index, MSG, IS_EXECUTED_FLAG]

    # Set the key value pair in the map to mark transaction as executed
    exec.account::set_map_item
    # => [OLD_MAP_ROOT, [0, 0, 0, is_executed]]

    dropw drop drop drop
    # => [is_executed]

    assertz.err=ERR_TX_ALREADY_EXECUTED
    # => []
end

#! Verify signatures for all required signers in a loop.
#!
#! This procedure iterates through the required number of signers, fetches their public keys
#! from the provided account storage map slot, verifies their signatures against the transaction message,
#! and returns the number of successfully verified signatures.
#!
#! Inputs:  [pub_key_slot_idx, num_of_approvers, MSG]
#! Outputs: [num_verified_signatures, MSG]
proc.verify_signatures.16
    loc_store.PUB_KEY_MAP_IDX_LOC
    # => [num_of_approvers, MSG]

    # Initializing SUCCESSFUL_VERIFICATIONS local memory address to 0
    push.0 loc_store.SUCCESSFUL_VERIFICATIONS_LOC
    # => [num_of_approvers, MSG]

    # Counter `i` starts at `num_of_approvers` and counts down to 0
    # => [i, MSG]

    # Loop through required signers and verify signatures.
    # ---------------------------------------------------------------------------------------------

    dup neq.0
    while.true
        # => [i, MSG]

        # Fetch public key from storage map.
        # -----------------------------------------------------------------------------------------

        sub.1 dup push.0.0.0 loc_load.PUB_KEY_MAP_IDX_LOC
        # => [owner_key_slot, [0, 0, 0, i-1], i-1, MSG]

        exec.account::get_map_item
        # => [OWNER_PUB_KEY, i-1, MSG]

        loc_storew.CURRENT_PK_LOC
        # => [OWNER_PUB_KEY, i-1, MSG]

        # Check if signature exists for this signer.
        # -----------------------------------------------------------------------------------------

        movup.4 movdn.8 swapw dupw movdnw.2
        # => [MSG, OWNER_PUB_KEY, MSG, i-1]

        hmerge
        # => [SIG_KEY, MSG, i-1]

        adv.has_mapkey
        # => [SIG_KEY, MSG, i-1]

        adv_push.1
        # => [has_signature, SIG_KEY, MSG, i-1]

        # if SIG_KEY => SIGNATURE exists in AdviceMap check the signature
        if.true
            # => [SIG_KEY, MSG, i-1]

            dupw.1
            # => [MSG, SIG_KEY, MSG, i-1]

            swapw
            # => [SIG_KEY, MSG, MSG, i-1]

            # Verify the signature against the public key and message.
            # -----------------------------------------------------------------------------------------

            loc_loadw.CURRENT_PK_LOC
            # => [PK, MSG, MSG, i-1]

            swapw
            # => [MSG, PK, MSG, i-1]

            # Emit the authentication request event that pushes a signature for the message to the advice stack.
            emit.AUTH_REQUEST

            swapw
            # OS => [PUB_KEY, MSG, MSG, i-1]
            # AS => [SIGNATURE]

            exec.rpo_falcon512::verify
            # => [MSG, i-1]

            loc_load.SUCCESSFUL_VERIFICATIONS_LOC
            add.1
            loc_store.SUCCESSFUL_VERIFICATIONS_LOC
            # => [MSG, i-1]
        else
            dropw
            # => [MSG, i-1]
        end
        # => [MSG, i-1]

        movup.4
        # => [i-1, MSG]

        dup neq.0
        # => [should_continue, i-1, MSG]
    end
    # => [i-1, MSG]

    # Return successful signature verifications along with MSG
    # -----------------------------------------------------------------------------------------

    drop
    # => [MSG]

    loc_load.SUCCESSFUL_VERIFICATIONS_LOC
    # => [num_verified_signatures, MSG]
end

#! Authenticate a transaction using the Falcon signature scheme with multi-signature support.
#!
#! This procedure implements multi-signature authentication by:
#! 1. Computing the transaction summary message that needs to be signed
#! 2. Verifying signatures from multiple required signers against their public keys
#! 3. Ensuring the minimum threshold of valid signatures is met
#! 4. Implementing replay protection by tracking executed transactions
#!
#! Inputs:
#!   Operand stack: [SALT]
#!   Advice map: {
#!     h(SIG_0, MSG): SIG_0,
#!     h(SIG_1, MSG): SIG_1,
#!     h(SIG_n, MSG): SIG_n
#!   }
#! Outputs:
#!   Operand stack: []
#!
#! Where:
#! - SALT is a cryptographically random nonce that enables multiple concurrent
#!   multisig transactions while maintaining replay protection. Each transaction
#!   must use a unique SALT value to ensure transaction uniqueness.
#! - SIG_i is the signature from the i-th signer.
#! - MSG is the transaction message being signed.
#! - h(SIG_i, MSG) is the hash of the signature and message used as the advice map key.
#!
#! Panics if:
#! - insufficient number of valid signatures (below threshold).
#! - the same transaction has already been executed (replay protection).
#!
#! Invocation: call
export.auth__tx_rpo_falcon512_multisig
    exec.account::incr_nonce drop
    # => [SALT]

    # ------ Computing transaction summary ------

    exec.auth::create_tx_summary
    # => [SALT, OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    # to build a tx_summary in the host, we need these four words in the advice provider
    exec.auth::adv_insert_hqword
    # => [SALT, OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    # the commitment to the tx summary is the message that is signed
    exec.auth::hash_tx_summary
    # => [TX_SUMMARY_COMMITMENT]

    # ------ Verifying owner signatures ------

    push.THRESHOLD_CONFIG_SLOT
    # => [index, TX_SUMMARY_COMMITMENT]

    exec.account::get_item
    # => [0, 0, num_of_approvers, threshold, TX_SUMMARY_COMMITMENT]

    drop drop
    # => [num_of_approvers, threshold, TX_SUMMARY_COMMITMENT]

    swap movdn.5
    # => [num_of_approvers, TX_SUMMARY_COMMITMENT, threshold]

    push.PUBLIC_KEYS_MAP_SLOT
    # => [pub_key_slot_idx, num_of_approvers, TX_SUMMARY_COMMITMENT, threshold]

    exec.verify_signatures
    # => [num_verified_signatures, TX_SUMMARY_COMMITMENT, threshold]

    # ------ Checking threshold is >= num_verified_signatures ------

    movup.5
    # => [threshold, num_verified_signatures, TX_SUMMARY_COMMITMENT]

    u32assert2 u32lt
    # => [is_unauthorized, TX_SUMMARY_COMMITMENT]

    # If signatures are non-existent the tx will fail here.
    if.true
        emit.UNAUTHORIZED_EVENT
        push.0 assert.err="insufficient number of signatures"
    end

    # ------ Writing executed transaction MSG to map ------

    exec.assert_new_tx
    # => [TX_SUMMARY_COMMITMENT]
end
