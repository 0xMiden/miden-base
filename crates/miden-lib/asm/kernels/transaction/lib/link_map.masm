use.std::collections::smt
use.kernel::memory

# A link map is a map data structure based on a sorted linked list.
#
# # Basics & Terminology
#
# The entries in the list are sorted by their keys. The order is defined by comparing the
# individual felts of the word from most significant (the top element on a word layed out on the
# stack) to least significant.
#
# A link map is identified by a pointer called the map_ptr. The map_ptr points to a single field
# element which is the head of the map, i.e. the first element in the map with the smallest key.
# The value at the map_ptr is an entry_ptr, which points to a concrete entry of the map.
#
# The map_ptr is a double pointer, i.e. it takes two dereference operations to end up at the head
# entry of the map. This has the following properties:
# - A link map does not need any initialization. If a map_ptr is uninitialized mem_load returns 0,
#   which is interpreted as an empty map.
# - It is simple to update the head of the map simply by setting *map_ptr = entry_ptr, where
#   entry_ptr is the new head entry of the map.
#
# # Layout
#
# The layout of a link map _conceptually_ looks like this:
#
# [
#   (map_ptr, prev_entry_ptr, next_entry_ptr, 0, KEY, VALUE),
#   (map_ptr, prev_entry_ptr, next_entry_ptr, 0, KEY, VALUE),
#   ...
# ]
#
# where:
# - KEY and VALUE are the user-provided data and both are of size word.
# - the first word is the METADATA of the entry.
# - the map_ptr is the pointer of the map to which this entry belongs. See the security section
#   for the rationale.
# - the prev_entry_ptr is an entry pointer that points to the previous item in the list whose key
#   is smaller than the entry's KEY.
# - the next_entry_ptr is an entry pointer that points to the next item in the list whose key is
#   greater than the entry's KEY.
# - the fourth element in the metadata is currently unused, but could be used to store additional
#   things like the current number of entries of the map.
#
# Each entry takes up 3 words or 12 field elements of memory. Note that the above layout is not
# how the map is layed out in memory, since entries are not guaranteed to be contiguous in memory.
#
# # Memory Allocation
#
# A link map can be grown dynamically without the need to specify the number of entries upfront.
# This works by statically allocating a large chunk of dedicated link map memory in the kernel and
# then allocating entry by entry on demand.
#
# Multiple link map's entries can be allocated from that same region of memory, which avoids
# having to split up this chunk into smaller chunks per map, which would impose more limitations
# on the overall system.
#
# Security
#
# The in-VM link map works closely together with a link map part of the VM host. For set
# operations this means the host does the expensive iteration to find the place where a key-value
# pair must be inserted or updated. Similarly for get operations. The host will either find the
# requested key-value pair or provide the entry at which the pair would reside if it was present
# in the map to prove its absence. The link map in the VM will validate that what the host
# provided is correct.
#
# Because the host cannot be trusted, the link map in the VM must validate a couple of things.
#
# ## Entry Pointer Validity
#
# The first of these is basic entry pointer validity. Both in set and get operations, the host
# provides entry pointers. It is important that the host cannot provide a pointer to an arbitrary
# memory location, otherwise the VM might read or write to those locations and produce incorrect
# results.
#
# Each map entry is allocated from a dedicated range of memory. That way, it is simple to validate
# that a host-provided entry_ptr lies within that range. That ensures that no other piece of
# memory can be abused as an entry. Moreover, each entry takes up exactly three words, so each
# entry pointer can be checked for entry-alignment. Finally, because entries from _different_ link
# maps are allocated from the same memory region means it would still be possible for a host to
# provide an entry pointer from map 1 to an operation in map 2. To avoid this, each entry is
# tagged using the map_ptr. Every operation on a map_ptr asserts that the entry's map_ptr tag
# matches it.
#
# ## Set Operation
#
# During a set operation, the host is asked where the provided key-value pair should be inserted
# or updated. The host can respond with three different values:
# - Update = 0
#   - Means the key already exists in the map and requires validating that the host-provided entry
#     pointer's key matches the one that is being set.
# - InsertAtHead = 1
#   - Means the key should be inserted at the head of the list. This requires validating that the
#     key that is being inserted is less than current head entry's key.
# - InsertAfterEntry = 2
#   - Means the key should be inserted after the entry that the host provided. This requires
#     validating that the key that is being inserted is greater than the host-provided entry's
#     key. If the host-provided entry has a next entry, then the key that is being inserted must
#     be less than the next entry's key.
#
# ## Get Operation
#
# During a get operation, the host is asked where the requested key-value pair is located, or if
# it does not exist, where its absence can be validated. Similarly to the set operation, the host
# can respond with three different values:
# - Found = 0
#   - Means the key was found and requires validating that the host-provided entry pointer's key
#     matches the requested one.
# - AbsentAtHead = 1
#   - Means the key would be at the head of the map, if it was present in the map. This requires
#     validating that the requested key is smaller than the current head's key to validate the
#     absence claim.
# - AbsentAfterEntry = 2
#   - Means the key would be after the entry that the host provided, if it was present in the map.
#     This requires validating that the requested key is greater than the host-provided entry's
#     key. If the host-provided entry has a next entry, then the requested key must also be less
#     than the next entry's key to validate the absence claim.

# ERRORS
# =================================================================================================

const.ERR_LINK_MAP_CANNOT_BE_EMPTY_ON_ABSENCE_AFTER_ENTRY="map cannot be empty when proving absence after an entry"

const.ERR_LINK_MAP_PROVIDED_KEY_NOT_EQUAL_TO_ENTRY_KEY="provided key does not match key in map entry"

const.ERR_LINK_MAP_PROVIDED_KEY_NOT_GREATER_THAN_ENTRY_KEY="provided key is not greater than the entry key"

const.ERR_LINK_MAP_PROVIDED_KEY_NOT_LESS_THAN_ENTRY_KEY="provided key is not less than the entry key"

const.ERR_LINK_MAP_ENTRY_PTR_IS_OUTSIDE_VALID_MEMORY_REGION="host-provided entry ptr is outside the valid memory region"

const.ERR_LINK_MAP_ENTRY_PTR_IS_NOT_ENTRY_ALIGNED="host-provided entry ptr is not 'link map entry'-aligned"

const.ERR_LINK_MAP_MAP_PTR_IN_ENTRY_DOES_NOT_MATCH_EXPECTED_MAP_PTR="map ptr stored in host-provided entry does not match actual pointer of the map"

# CONSTANTS
# =================================================================================================

# The offset of the prev_entry_ptr in an entry's metadata.
const.PREV_ENTRY_PTR_OFFSET=1

# The offset of the next_entry_ptr in an entry's metadata.
const.NEXT_ENTRY_PTR_OFFSET=2

# The offset of the KEY in an entry.
const.KEY_OFFSET=4

# The offset of the VALUE in an entry.
const.VALUE_OFFSET=8

# The value of the Update operation for a set event.
const.INSERT_OPERATION_UPDATE=0

# The value of the InsertAtHead operation for a set event.
const.INSERT_OPERATION_AT_HEAD=1

# The value of the Found operation for a get event.
const.GET_OPERATION_FOUND=0

# The value of the AbsentAtHead operation for a get event.
const.GET_OPERATION_ABSENT_AT_HEAD=1

# EVENTS
# =================================================================================================

# Event emitted when an entry is set.
const.LINK_MAP_SET_EVENT=131098

# Event emitted when an entry is fetched.
const.LINK_MAP_GET_EVENT=131099

# LINK MAP PROCEDURES
# =================================================================================================

# PUBLIC API
# -------------------------------------------------------------------------------------------------

#! Inserts the specified key-value pair into the map, or updates the existing key if the pair
#! already exists.
#!
#! Note that unlike smt::set, passing VALUE = EMPTY_WORD does not mean removal of the entry.
#!
#! Inputs:  [map_ptr, KEY, VALUE]
#! Outputs: []
#!
#! Where:
#! - map_ptr is the pointer to the map.
#! - KEY is the key that will be set in the map.
#! - VALUE is the value that will be set under KEY.
#!
#! Panics if:
#! - the host provides faulty advice. See panic sections of assert_entry_ptr_is_valid,
#!   update_entry, insert_at_head, insert_after_entry.
export.set
    emit.LINK_MAP_SET_EVENT adv_push.2
    # => [operation, entry_ptr, map_ptr, KEY, VALUE]

    dup.2 dup.2
    # => [entry_ptr, map_ptr, operation, entry_ptr, map_ptr, KEY, VALUE]

    exec.assert_entry_ptr_is_valid
    # => [operation, entry_ptr, map_ptr, KEY, VALUE]

    dup eq.INSERT_OPERATION_AT_HEAD swap eq.INSERT_OPERATION_UPDATE
    # => [is_insert_update_op, is_insert_at_head_op, entry_ptr, map_ptr, KEY, VALUE]

    if.true
        # update existing entry
        # drop is_insert_at_head_op and map_ptr from stack
        drop swap drop
        # => [entry_ptr, KEY, VALUE]

        exec.update_entry
        # => []
    else
        # insert new entry
        # => [is_insert_at_head_op, entry_ptr, map_ptr, KEY, VALUE]

        if.true
            # drop the entry ptr since we can load the head from map_ptr
            drop
            # => [map_ptr, KEY, VALUE]

            exec.insert_at_head
            # => []
        else
            # insert after existing entry
            exec.insert_after_entry
            # => []
        end
    end
end

#! Returns the VALUE located at KEY in the given map.
#!
#! Inputs:  [map_ptr, KEY]
#! Outputs: [contains_key, VALUE]
#!
#! Where:
#! - map_ptr is the pointer to the map.
#! - KEY is the key that will be fetched from the map.
#! - contains_key is a boolean indicating whether the map contained the KEY or not.
#! - VALUE is the value fetched from the map. VALUE is guaranteed to be an EMPTY_WORD when the
#!   map did not contain the key.
#!
#! Panics if:
#! - the host provides faulty advice. See panic sections of assert_entry_ptr_is_valid,
#!   get_existent_value, validate_absent_at_head, validate_absent_after_entry.
export.get
    emit.LINK_MAP_GET_EVENT adv_push.2
    # => [get_operation, entry_ptr, map_ptr, KEY]

    dup.2 dup.2
    # => [entry_ptr, map_ptr, get_operation, entry_ptr, map_ptr, KEY]

    exec.assert_entry_ptr_is_valid
    # => [get_operation, entry_ptr, map_ptr, KEY]

    dup eq.GET_OPERATION_ABSENT_AT_HEAD swap eq.GET_OPERATION_FOUND
    # => [is_found, is_absent_at_head, entry_ptr, map_ptr, KEY]

    if.true
        # drop is_absent_at_head and map_ptr from stack
        drop swap drop
        # => [entry_ptr, KEY]

        exec.get_existent_value
        # => [VALUE]

        push.1
        # => [contains_key, VALUE]
    else
        # validate absence of the entry
        # => [is_absent_at_head, entry_ptr, map_ptr, KEY]

        if.true
            drop
            # => [map_ptr, KEY]

            exec.validate_absent_at_head
            # => []

        else
            exec.validate_absent_after_entry
            # => []
        end

        padw push.0
        # => [contains_key, EMPTY_WORD]
    end
end

#! Returns true if the list is empty, i.e. map ptr points to a 0 entry_ptr, false otherwise.
#!
#! Inputs:  [map_ptr]
#! Outputs: [is_empty]
export.is_empty
    mem_load eq.0
end

# SET HELPERS
# -------------------------------------------------------------------------------------------------

#! Inserts the key-value pair at the head of the map.
#!
#! Inputs:  [map_ptr, KEY, VALUE]
#! Outputs: []
#!
#! Panics if:
#! - the KEY is not less than the key in the head of the map, unless the map is empty.
proc.insert_at_head
    exec.memory::link_map_malloc
    # => [entry_ptr, map_ptr, KEY, VALUE]

    dup movdn.10
    # => [entry_ptr, map_ptr, KEY, VALUE, entry_ptr]

    dup.1 movdn.10
    # => [entry_ptr, map_ptr, KEY, VALUE, map_ptr, entry_ptr]

    exec.insert_pair
    # => [map_ptr, entry_ptr]

    dup exec.is_empty not
    # => [is_non_empty, map_ptr, entry_ptr]

    if.true
        dup.1
        # => [entry_ptr, map_ptr, entry_ptr]

        dup.1 exec.get_head
        # => [current_head_entry_ptr, entry_ptr, map_ptr, entry_ptr]

        # assert that entry_ptr.key < current_head_entry_ptr.key
        dup.1 exec.get_key
        # => [ENTRY_KEY, current_head_entry_ptr, entry_ptr, map_ptr, entry_ptr]

        dup.4
        # => [current_head_entry_ptr, ENTRY_KEY, current_head_entry_ptr, entry_ptr, map_ptr, entry_ptr]

        exec.assert_key_is_less
        # => [current_head_entry_ptr, entry_ptr, map_ptr, entry_ptr]

        dup movdn.2
        # => [current_head_entry_ptr, entry_ptr, current_head_entry_ptr, map_ptr, entry_ptr]

        # set current_head_entry_ptr.prev_entry_ptr = entry_ptr
        exec.set_prev_entry_ptr
        # => [current_head_entry_ptr, map_ptr, entry_ptr]

        # set entry_ptr.next_entry_ptr = current_head_entry_ptr
        dup.2 exec.set_next_entry_ptr
        # => [map_ptr, entry_ptr]
    end

    # update the current head of the map to the newly inserted entry
    exec.set_head
    # => []
end

#! Updates the value in the given entry.
#!
#! Inputs:  [entry_ptr, KEY, VALUE]
#! Outputs: []
#!
#! Panics if:
#! - the key in the entry does not match the provided KEY.
proc.update_entry
    dup movdn.5
    # => [entry_ptr, KEY, entry_ptr, VALUE]

    exec.assert_key_is_equal
    # => [entry_ptr, VALUE]

    exec.set_value
    # => []
end

#! Inserts the key value pair as the next entry after the prev_entry_ptr.
#!
#! Inputs:  [prev_entry_ptr, map_ptr, KEY, VALUE]
#! Outputs: []
#!
#! Panics if:
#! - the KEY is not greater than the key in the prev entry.
#! - the KEY is not less than the key in prev_entry.next_entry, unless the prev entry is the last
#!   one in the map.
proc.insert_after_entry
    movdn.5
    # => [map_ptr, KEY, prev_entry_ptr, VALUE]

    movdn.5
    # => [KEY, prev_entry_ptr, map_ptr, VALUE]

    dupw dup.8
    # => [prev_entry_ptr, KEY, KEY, prev_entry_ptr, map_ptr, VALUE]

    exec.assert_key_is_greater
    # => [KEY, prev_entry_ptr, map_ptr, VALUE]

    movup.4 movdn.9
    # => [KEY, map_ptr, VALUE, prev_entry_ptr]

    movup.4
    # => [map_ptr, KEY, VALUE, prev_entry_ptr]

    exec.memory::link_map_malloc
    # => [entry_ptr, map_ptr, KEY, VALUE, prev_entry_ptr]

    dup movdn.10
    # => [entry_ptr, map_ptr, KEY, VALUE, entry_ptr, prev_entry_ptr]

    exec.insert_pair
    # => [entry_ptr, prev_entry_ptr]

    dup.1 exec.get_next_entry_ptr movdn.2
    # => [entry_ptr, prev_entry_ptr, next_entry_ptr]

    dup dup.2
    # => [prev_entry_ptr, entry_ptr, entry_ptr, prev_entry_ptr, next_entry_ptr]

    # set prev_entry_ptr.next_entry_ptr = entry_ptr
    exec.set_next_entry_ptr
    # => [entry_ptr, prev_entry_ptr, next_entry_ptr]

    dup movdn.3
    # => [entry_ptr, prev_entry_ptr, next_entry_ptr, entry_ptr]

    # set entry_ptr.prev_entry = prev_entry_ptr
    exec.set_prev_entry_ptr
    # => [entry_ptr, next_entry_ptr, entry_ptr]

    dup eq.0 not
    # => [has_next_entry, next_entry_ptr, entry_ptr]

    if.true
        dup.1 exec.get_key
        # => [KEY, next_entry_ptr, entry_ptr]

        dup.4
        # => [next_entry_ptr, KEY, next_entry_ptr, entry_ptr]

        # assert KEY < next_entry.key
        exec.assert_key_is_less
        # => [next_entry_ptr, entry_ptr]

        dup dup.2
        # => [entry_ptr, next_entry_ptr, next_entry_ptr, entry_ptr]

        # set entry_ptr.next_entry_ptr = next_entry
        exec.set_next_entry_ptr
        # => [next_entry_ptr, entry_ptr]

        # set next_entry.prev_entry_ptr = entry_ptr
        exec.set_prev_entry_ptr
        # => []

    else
        # remove unneeded stack elements
        drop drop
        # => []
    end
    # => []
end

#! Inserts the key, value into the entry pointer and sets the map ptr to the provided value.
#!
#! Inputs:  [entry_ptr, map_ptr, KEY, VALUE]
#! Outputs: []
proc.insert_pair
    swap dup.1
    # => [entry_ptr, map_ptr, entry_ptr, KEY, VALUE]

    exec.set_map_ptr
    # => [entry_ptr, KEY, VALUE]

    dup movdn.5
    # => [entry_ptr, KEY, entry_ptr, VALUE]

    exec.set_key

    # => [entry_ptr, VALUE]

    exec.set_value
    # => []
end

# GET HELPERS
# -------------------------------------------------------------------------------------------------

#! Validates that the provided KEY is absent at the head of the link map.
#!
#! An invariant of the link map is that its entries are sorted and since there is no previous
#! entry for the head, this proves that the KEY is absent from the map.
#!
#! Inputs:  [map_ptr, KEY]
#! Outputs: []
#!
#! Panics if:
#! - the KEY is not less than the key in the head of the map, unless the map is empty.
proc.validate_absent_at_head
    dup exec.is_empty
    # => [is_empty, map_ptr, KEY]

    if.true
        # in an empty list, any KEY is absent at the head, so there's nothing further to validate
        drop dropw
        # => []
    else
        exec.get_head
        # => [entry_ptr, KEY]

        # assert that KEY is less than the current head's key
        exec.assert_key_is_less
        # => []
    end
end

#! Validates that the provided KEY is absent after the provided entry.
#!
#! If KEY is greater than the key in the entry and less than the key in entry's next entry, then
#! that proves the absence of the key.
#!
#! Inputs:  [entry_ptr, map_ptr, KEY]
#! Outputs: []
#!
#! Panics if:
#! - the map is empty.
#! - the KEY is not greater than the key in the entry.
#! - the KEY is not less than the key in entry.next_entry, unless the entry is the last one in the map.
proc.validate_absent_after_entry
    swap exec.is_empty assertz.err=ERR_LINK_MAP_CANNOT_BE_EMPTY_ON_ABSENCE_AFTER_ENTRY
    # => [entry_ptr, KEY]

    movdn.4 dupw
    # => [KEY, KEY, entry_ptr]

    dup.8
    # => [entry_ptr, KEY, KEY, entry_ptr]

    # assert that KEY is greater than the entry's key
    exec.assert_key_is_greater
    # => [KEY, entry_ptr]

    movup.4 exec.get_next_entry_ptr
    # => [next_entry_ptr, KEY]

    dup eq.0
    # => [is_last_entry, next_entry_ptr, KEY]

    if.true
        # nothing further to validate
        drop dropw
        # => []
    else
        # if there is a next entry, then the KEY must be less than next entry's key
        exec.assert_key_is_less
        # => []
    end
    # => []
end

#! Fetches the VALUE at the provided KEY from the provided entry.
#!
#! Inputs:  [entry_ptr, KEY]
#! Outputs: [VALUE]
#!
#! Panics if:
#! - the key in the entry does not match KEY.
proc.get_existent_value
    movdn.4 dup.4
    # => [entry_ptr, KEY, entry_ptr]

    exec.assert_key_is_equal
    # => [entry_ptr]

    exec.get_value
    # => [VALUE]
end

# HELPERS
# -------------------------------------------------------------------------------------------------

#! Returns true if the entry at the given ptr has a non-null ptr to a next entry.
#!
#! Inputs:  [entry_ptr]
#! Outputs: [has_next]
proc.has_next
    exec.get_next_entry_ptr eq.0 not
end

#! Sets the next_entry ptr of the entry to the provided value.
#!
#! Inputs:  [entry_ptr, next_entry_ptr]
#! Outputs: []
proc.set_next_entry_ptr
    add.NEXT_ENTRY_PTR_OFFSET mem_store
    # => []
end

#! Returns the value of the next_entry pointer in the provided entry pointer.
#!
#! Inputs:  [entry_ptr]
#! Outputs: [next_entry_ptr]
proc.get_next_entry_ptr
    add.NEXT_ENTRY_PTR_OFFSET mem_load
    # => [next_entry_ptr]
end

#! Sets the prev_entry ptr of the entry to the provided value.
#!
#! Inputs:  [entry_ptr, prev_entry_ptr]
#! Outputs: []
proc.set_prev_entry_ptr
    add.PREV_ENTRY_PTR_OFFSET mem_store
    # => []
end

#! Sets the value of the entry pointer.
#!
#! Inputs:  [entry_ptr, VALUE]
#! Outputs: []
proc.set_value
    add.VALUE_OFFSET mem_storew dropw
end

#! Returns the value of the entry pointer.
#!
#! Inputs:  [entry_ptr]
#! Outputs: [VALUE]
proc.get_value
    padw movup.4
    # => [entry_ptr, pad(4)]

    add.VALUE_OFFSET mem_loadw
    # => [VALUE]
end

#! Sets the key of the entry pointer.
#!
#! Inputs:  [entry_ptr, KEY]
#! Outputs: []
proc.set_key
    add.KEY_OFFSET mem_storew dropw
end

#! Returns the key of the entry pointer.
#!
#! Inputs:  [entry_ptr]
#! Outputs: [KEY]
proc.get_key
    padw movup.4
    # => [entry_ptr, pad(4)]

    add.KEY_OFFSET mem_loadw
    # => [KEY]
end

#! Sets the entry ptr as the head of the linked list.
#!
#! Inputs:  [map_ptr, entry_ptr]
#! Outputs: []
proc.set_head
    mem_store
end

#! Returns the entry ptr at the head of the linked list.
#!
#! Inputs:  [map_ptr]
#! Outputs: [entry_ptr]
proc.get_head
    mem_load
end

#! Sets the map ptr of the entry pointer.
#!
#! Inputs:  [entry_ptr, map_ptr]
#! Outputs: []
proc.set_map_ptr
    mem_store
end

#! Returns the map ptr of the entry pointer.
#!
#! Inputs:  [entry_ptr]
#! Outputs: [map_ptr]
proc.get_map_ptr
    mem_load
end

# ASSERTIONS
# -------------------------------------------------------------------------------------------------

#! Asserts that the KEY is equal to the key in the entry.
#!
#! Inputs:  [entry_ptr, KEY]
#! Outputs: []
proc.assert_key_is_equal
    exec.get_key swapw
    # => [KEY, ENTRY_KEY]

    exec.is_key_equal assert.err=ERR_LINK_MAP_PROVIDED_KEY_NOT_EQUAL_TO_ENTRY_KEY
    # => []
end

#! Asserts that the KEY is greater than the key in the entry pointer.
#!
#! Inputs:  [entry_ptr, KEY]
#! Outputs: []
proc.assert_key_is_greater
    exec.get_key swapw
    # => [KEY, ENTRY_KEY]

    exec.is_key_greater assert.err=ERR_LINK_MAP_PROVIDED_KEY_NOT_GREATER_THAN_ENTRY_KEY
    # => []
end

#! Asserts that the KEY is less than the key in the entry pointer.
#!
#! Inputs:  [entry_ptr, KEY]
#! Outputs: []
proc.assert_key_is_less
    exec.get_key swapw
    # => [KEY, ENTRY_KEY]

    exec.is_key_less assert.err=ERR_LINK_MAP_PROVIDED_KEY_NOT_LESS_THAN_ENTRY_KEY
    # => []
end

#! Asserts that the given entry ptr is a valid entry in the map identified by map_ptr.
#!
#! Inputs:  [entry_ptr, map_ptr]
#! Outputs: []
#!
#! Panics if:
#! - any of the following conditions is false, except if the map is empty:
#!   - LINK_MAP_MEMORY_START_PTR <= entry_ptr < LINK_MAP_MEMORY_END_PTR.
#!   - entry ptr is "link map entry"-aligned, i.e. entry_ptr % LINK_MAP_ENTRY_SIZE == 0. This
#!     works because every entry ptr is a multiple of LINK_MAP_ENTRY_SIZE added to
#!     LINK_MAP_MEMORY_START_PTR which happens to be itself a multiple of LINK_MAP_ENTRY_SIZE.
#!   - entry's map ptr is equal to the given map_ptr.
export.assert_entry_ptr_is_valid
    # Check entry pointer is in valid memory range.
    # -------------------------------------------------------------------------------------------------

    exec.memory::get_link_map_memory_start_ptr dup.1
    # => [entry_ptr, LINK_MAP_MEMORY_START_PTR, entry_ptr, map_ptr]

    # compute LINK_MAP_MEMORY_START_PTR <= entry_ptr
    lte
    # => [is_entry_ptr_gt_start, entry_ptr, map_ptr]

    dup.1 exec.memory::get_link_map_memory_end_ptr
    # => [LINK_MAP_MEMORY_END_PTR, entry_ptr, is_entry_ptr_gt_start, entry_ptr, map_ptr]

    # assert entry_ptr < LINK_MAP_MEMORY_END_PTR
    lt and
    # => [is_entry_ptr_in_valid_range, entry_ptr, map_ptr]

    # we have to skip the assertion if the map is empty
    dup.2 exec.is_empty
    # => [is_empty_map, is_entry_ptr_in_valid_range, entry_ptr, map_ptr]

    dup movdn.4
    # => [is_empty_map, is_entry_ptr_in_valid_range, entry_ptr, map_ptr, is_empty_map]

    # this assertion is always true if is_empty_map is true
    or assert.err=ERR_LINK_MAP_ENTRY_PTR_IS_OUTSIDE_VALID_MEMORY_REGION
    # => [entry_ptr, map_ptr, is_empty_map]

    # Check that the entry pointer is aligned to link map entries.
    # -------------------------------------------------------------------------------------------------

    # note that the previous range check ensures that entry_ptr fits in a u32
    dup exec.memory::get_link_map_entry_size u32mod eq.0
    # => [is_entry_ptr_aligned, entry_ptr, map_ptr, is_empty_map]

    # this assertion is always true if is_empty_map is true
    dup.3 or assert.err=ERR_LINK_MAP_ENTRY_PTR_IS_NOT_ENTRY_ALIGNED
    # => [entry_ptr, map_ptr, is_empty_map]

    # Check entry pointer's map ptr is equal to map_ptr.
    # -------------------------------------------------------------------------------------------------

    # check if entry_ptr.map_ptr == map_ptr
    exec.get_map_ptr eq
    # => [entry_contains_map_ptr, is_empty_map]

    # this assertion is always true if is_empty_map is true
    or assert.err=ERR_LINK_MAP_MAP_PTR_IN_ENTRY_DOES_NOT_MATCH_EXPECTED_MAP_PTR
end

# COMPARISON OPERATIONS
# -------------------------------------------------------------------------------------------------

#! Returns true if KEY1 is equal to KEY2, false otherwise.
#!
#! The implementation avoids branching for performance reasons.
#! The procedure is exported for testing purposes only.
#!
#! Inputs:  [KEY1, KEY2]
#! Outputs: [is_key_equal]
export.is_key_equal
    exec.arrange_words_adjacent
    # => [2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    push.1
    # => [is_key_equal, 2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    repeat.4
        swap movup.2
        # => [2_x, 1_x, is_key_equal, <remaining_felts>]

        eq
        # => [felts_x_equal, is_key_equal, <remaining_felts>]

        and
        # => [is_key_equal, <remaining_felts>]
    end
    # => [is_key_equal]
end

#! Returns true if KEY1 is strictly greater than KEY2, false otherwise.
#!
#! The implementation avoids branching for performance reasons.
#! The procedure is exported for testing purposes only.
#!
#! For reference, this is equivalent to the following Rust function:
#!
#! fn is_key_greater(key1: Word, key2: Word) -> bool {
#!     let mut result = false;
#!     let mut cont = true;
#!
#!     for i in (0..4).rev() {
#!         let gt = key1[i].as_int() > key2[i].as_int();
#!         let eq = key1[i].as_int() == key2[i].as_int();
#!         result |= gt & cont;
#!         cont &= eq;
#!     }
#!
#!     result
#! }
#!
#! Inputs:  [KEY1, KEY2]
#! Outputs: [is_key_greater]
export.is_key_greater
    exec.arrange_words_adjacent
    # => [2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    push.1.0
    # => [is_key_greater, continue, 2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    repeat.4
        movup.3 movup.3
        # => [2_x, 1_x, is_key_greater, continue, <remaining_felts>]

        # check 1_x == 2_x; if so, we continue
        dup dup.2 eq
        # => [is_felt_eq, 2_x, 1_x, is_key_greater, continue, <remaining_felts>]

        movdn.3
        # => [2_x, 1_x, is_key_greater, is_felt_eq, continue, <remaining_felts>]

        # check 1_x > 2_x
        gt
        # => [is_felt_gt, is_key_greater, is_felt_eq, continue, <remaining_felts>]

        dup.3 and
        # => [is_felt_gt_if_continue, is_key_greater, is_felt_eq, continue, <remaining_felts>]

        or movdn.2
        # => [is_felt_eq, continue, is_key_greater, <remaining_felts>]

        # keeps continue at 1 if the felts are equal
        # sets continue to 0 if the felts are not equal
        and
        # => [continue, is_key_greater, <remaining_felts>]

        swap
        # => [is_key_greater, continue, <remaining_felts>]
    end
    # => [is_key_greater, continue]

    swap drop
    # => [is_key_greater]
end

#! Returns true if KEY1 is strictly less than KEY2, false otherwise.
#!
#! The implementation avoids branching for performance reasons.
#! The procedure is exported for testing purposes only.
#!
#! From an implementation standpoint this is exactly the same as `is_key_greater` except it uses
#! `lt` rather than `gt`. See its docs for details.
#!
#! Inputs:  [KEY1, KEY2]
#! Outputs: [is_key_less]
export.is_key_less
    exec.arrange_words_adjacent
    # => [2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    push.1.0
    # => [is_key_less, continue, 2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]

    repeat.4
        movup.3 movup.3
        # => [2_x, 1_x, is_key_less, continue, <remaining_felts>]

        # check 1_x == 2_x; if so, we continue
        dup dup.2 eq
        # => [is_felt_eq, 2_x, 1_x, is_key_less, continue, <remaining_felts>]

        movdn.3
        # => [2_x, 1_x, is_key_less, is_felt_eq, continue, <remaining_felts>]

        # check 1_x < 2_x
        lt
        # => [is_felt_lt, is_key_less, is_felt_eq, continue, <remaining_felts>]

        dup.3 and
        # => [is_felt_lt_if_continue, is_key_less, is_felt_eq, continue, <remaining_felts>]

        or movdn.2
        # => [is_felt_eq, continue, is_key_less, <remaining_felts>]

        # keeps continue at 1 if the felts are equal
        # sets continue to 0 if the felts are not equal
        and
        # => [continue, is_key_less, <remaining_felts>]

        swap
        # => [is_key_less, continue, <remaining_felts>]
    end
    # => [is_key_less, continue]

    swap drop
    # => [is_key_less]
end

#! Arranges the given words such that the corresponding elements are next to each other.
#!
#! Inputs:  [KEY1, KEY2]
#! Outputs: [key2_3, key1_3, key2_2, key1_2, key2_1, key1_1, key2_0, key1_0]
proc.arrange_words_adjacent
    # => [1_3, 1_2, 1_1, 1_0, 2_3, 2_2, 2_1, 2_0]

    movup.3 movup.7
    # => [2_0, 1_0, 1_3, 1_2, 1_1, 2_3, 2_2, 2_1]

    movup.4 movup.7
    # => [2_1, 1_1, 2_0, 1_0, 1_3, 1_2, 2_3, 2_2]

    movup.5 movup.7
    # => [2_2, 1_2, 2_1, 1_1, 2_0, 1_0, 1_3, 2_3]

    movup.6 movup.7
    # => [2_3, 1_3, 2_2, 1_2, 2_1, 1_1, 2_0, 1_0]
end
