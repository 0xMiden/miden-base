use.$kernel::memory
use.$kernel::note

# CONSTANTS
# =================================================================================================

# Max value for U16, used as the upper limit for expiration block delta
const.EXPIRY_UPPER_LIMIT=0xFFFF+1

# Max U32 value, used for initializing the expiration block number
const.MAX_BLOCK_NUM=0xFFFFFFFF

# ERRORS
# =================================================================================================

const.ERR_TX_INVALID_EXPIRATION_DELTA="transaction expiration block delta must be within 0x1 and 0xFFFF"

# PROCEDURES
# =================================================================================================

#! Returns the block commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [BLOCK_COMMITMENT]
#!
#! Where:
#! - BLOCK_COMMITMENT is the commitment of the transaction reference block.
export.memory::get_block_commitment

#! Returns the block number of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [num]
#!
#! Where:
#! - num is the transaction reference block number.
export.memory::get_blk_num->get_block_number

#! Returns the block timestamp of the reference block for this transaction.
#!
#! Inputs:  []
#! Outputs: [timestamp]
#!
#! Where:
#! - timestamp is the timestamp of the reference block for this transaction.
export.memory::get_blk_timestamp->get_block_timestamp

#! Returns the input notes commitment hash.
#!
#! See `transaction::api::get_input_notes_commitment` for details.
#!
#! Inputs:  []
#! Outputs: [INPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - INPUT_NOTES_COMMITMENT is the input notes commitment hash.
export.memory::get_input_notes_commitment

#! Returns the output notes commitment hash. This is computed as a sequential hash of
#! (note_id, note_metadata) tuples over all output notes.
#!
#! Inputs:  []
#! Outputs: [OUTPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - OUTPUT_NOTES_COMMITMENT is the output notes commitment.
export.note::compute_output_notes_commitment->get_output_notes_commitment

#! Updates the transaction expiration block delta.
#!
#! The input block_height_delta is added to the block reference number in order to output an upper
#! limit at which the transaction will be considered valid (not expired).
#! This value can be later decreased, but not increased.
#!
#! Inputs:  [block_height_delta]
#! Outputs: []
#!
#! Where:
#! - block_height_delta is the desired expiration time delta (1 to 0xFFFF).
export.update_expiration_block_delta
    # Ensure block_height_delta is between 1 and 0xFFFF (inclusive)
    dup neq.0 assert.err=ERR_TX_INVALID_EXPIRATION_DELTA
    # => [block_height_delta]

    dup u32assert.err=ERR_TX_INVALID_EXPIRATION_DELTA
    # => [block_height_delta, block_height_delta]

    u32lt.EXPIRY_UPPER_LIMIT assert.err=ERR_TX_INVALID_EXPIRATION_DELTA
    # => [block_height_delta]

    exec.get_block_number add
    # => [absolute_expiration_num]

    # Load the current stored delta from memory
    dup exec.memory::get_expiration_block_num
    # => [stored_expiration_block_num, absolute_expiration_num, absolute_expiration_num]

    # Check if block_height_delta is greater
    u32lt
    if.true
        # Set new expiration delta
        exec.memory::set_expiration_block_num
    else
        drop
    end
end

#! Gets the transaction expiration delta.
#!
#! Inputs:  []
#! Outputs: [block_height_delta]
#!
#! Where:
#! - block_height_delta is the stored expiration time delta (1 to 0xFFFF).
export.get_expiration_delta
    exec.memory::get_expiration_block_num
    # => [stored_expiration_block_num]

    dup eq.MAX_BLOCK_NUM
    if.true
        # The delta was not set
        drop push.0
    else
        # Calculate the delta
        exec.get_block_number sub
    end
end
