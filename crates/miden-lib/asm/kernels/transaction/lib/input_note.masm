use.$kernel::memory

#Â ERRORS
# =================================================================================================

const.ERR_INPUT_NOTE_INDEX_OUT_OF_BOUNDS="requested input note index should be less than the total number of input notes"

# INPUT NOTE PROCEDURES
# =================================================================================================

#! Returns the information about assets in the input note with the specified index.
#!
#! Inputs:  [note_index]
#! Outputs: [ASSETS_COMMITMENT, num_assets]
#!
#! Where:
#! - note_index is the index of the input note whose assets info should be returned.
#! - num_assets is the number of assets in the specified note.
#! - ASSETS_COMMITMENT is a sequential hash of the assets in the specified note.
#!
#! Panics if:
#! - the note index is greater or equal to the total number of input notes.
export.get_assets_info
    # assert that the provided note index is less than the total number of notes
    dup exec.memory::get_num_input_notes 
    # => [input_notes_num, note_index, note_index]
    
    u32assert2.err=ERR_INPUT_NOTE_INDEX_OUT_OF_BOUNDS
    u32lt assert.err=ERR_INPUT_NOTE_INDEX_OUT_OF_BOUNDS
    # => [note_index]

    # get the memory pointer to the requested note
    exec.memory::get_input_note_ptr
    # => [ptr]

    # get the number of assets in the note
    dup exec.memory::get_input_note_num_assets
    # => [num_assets, ptr]

    # get the assets commitment from the note pointer
    swap exec.memory::get_input_note_assets_commitment
    # => [ASSETS_COMMITMENT, num_assets]
end

#! Computes an input note's recipient commitment.
#!
#! Inputs:  [note_ptr]
#! Outputs: [RECIPIENT_COMMITMENT]
#!
#! Where:
#! - note_ptr is the memory location for the input note.
#! - RECIPIENT_COMMITMENT is the commitment to the input note's script, inputs, the serial number.
export.compute_recipient_commitment
    # compute SERIAL_COMMITMENT: hash(SERIAL_NUMBER || EMPTY_WORD)
    dup exec.memory::get_input_note_serial_num padw hmerge
    # => [SERIAL_COMMITMENT, note_ptr]

    # compute MERGE_SCRIPT: hash(SERIAL_COMMITMENT || SCRIPT_ROOT)
    dup.4 exec.memory::get_input_note_script_root hmerge
    # => [MERGE_SCRIPT, note_ptr]

    # compute RECIPIENT_COMMITMENT: hash(MERGE_SCRIPT || INPUT_COMMITMENT)
    movup.4 exec.memory::get_input_note_inputs_commitment hmerge
    # => [RECIPIENT_COMMITMENT]
end