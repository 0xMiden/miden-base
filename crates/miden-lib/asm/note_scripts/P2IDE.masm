use.miden::account
use.miden::note
use.miden::tx
use.miden::contracts::wallets::basic->wallet

#Â ERRORS
# =================================================================================================

const.ERR_P2IDE_WRONG_NUMBER_OF_INPUTS="P2IDE script expects exactly 4 note inputs"

const.ERR_P2IDE_RECLAIM_ACCT_IS_NOT_SENDER="P2IDE reclaim account not sender"

const.ERR_P2IDE_RECLAIM_HEIGHT_NOT_REACHED="P2IDE wait until reclaim height"

const.ERR_P2IDE_RECLAIM_DISABLED="P2IDE reclaim is disabled"

const.ERR_P2IDE_TIMELOCK_HEIGHT_NOT_REACHED="failed to consume P2IDE note because the note is still timelocked"

#! Helper procedure to add all assets of a note to an account.
#!
#! Inputs:  []
#! Outputs: []
proc.add_note_assets_to_account
    push.0 exec.note::get_assets
    # => [num_of_assets, 0 = ptr, ...]

    # compute the pointer at which we should stop iterating
    mul.4 dup.1 add
    # => [end_ptr, ptr, ...]

    # pad the stack and move the pointer to the top
    padw movup.5
    # => [ptr, 0, 0, 0, 0, end_ptr, ...]

    # compute the loop latch
    dup dup.6 neq
    # => [latch, ptr, 0, 0, 0, 0, end_ptr, ...]

    while.true
        # => [ptr, 0, 0, 0, 0, end_ptr, ...]

        # save the pointer so that we can use it later
        dup movdn.5
        # => [ptr, 0, 0, 0, 0, ptr, end_ptr, ...]

        # load the asset
        mem_loadw
        # => [ASSET, ptr, end_ptr, ...]

        # pad the stack before call
        padw swapw padw padw swapdw
        # => [ASSET, pad(12), ptr, end_ptr, ...]

        # add asset to the account
        call.wallet::receive_asset
        # => [pad(16), ptr, end_ptr, ...]

        # clean the stack after call
        dropw dropw dropw
        # => [0, 0, 0, 0, ptr, end_ptr, ...]

        # increment the pointer and compare it to the end_ptr
        movup.4 add.4 dup dup.6 neq
        # => [latch, ptr+4, ASSET, end_ptr, ...]
    end

    # clear the stack
    drop dropw drop
end

#! Hybrid Pay to ID (Reclaimable & Timelockable)
#!
#! Adds all assets from the note to the account if all of the following conditions are true:
#! - The transaction's reference block number is greater than or equal to the note's timelock block height,
#!   or the timelock block height is 0, which means it is disabled.
#! - Any of the following conditions is true:
#!   - The account ID against which the transaction is executed matches the note's target account id.
#!   - The account ID against which the transaction is executed matches the note's sender account id and
#!     the transaction's reference block number is greater than or equal to the note's reclaim block height,
#!     or the reclaim block height is 0, which means it is disabled.
#!
#! Requires that the account exposes:
#! - miden::contracts::wallets::basic::receive_asset procedure.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Note inputs are assumed to be as follows:
#! - target_account_id is the ID of the account for which the note is intended.
#! - reclaim_block_height is the block height at which the note can be reclaimed by the sender.
#! - timelock_block_height is the block height at which the note can be consumed by the target.
#!
#! Panics if:
#! - The account does not expose miden::contracts::wallets::basic::receive_asset procedure.
#! - The note is consumed before the timelock expired, i.e. the transaction's reference block
#!   number is less than the timelock block height.
#! - Before reclaim block height: the account ID of the executing account is not equal to the specified
#!   account ID.
#! - At and after reclaim block height: the account ID of the executing account is not equal to
#!   the specified account ID or sender account ID.
#! - The same non-fungible asset already exists in the account.
#! - Adding a fungible asset would result in an amount overflow, i.e., the total amount would be
#!   greater than 2^63.
begin

    # store the note inputs to memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is 4
    eq.4 assert.err=ERR_P2IDE_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    # read the reclaim block height, timelock_block_height, and target account ID from the note inputs
    mem_loadw
    # => [timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    dup eq.0 swap
    # => [timelock_block_height, is_timelock_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    # get block number and store in memory at address 0 for later
    exec.tx::get_block_number dup push.5 mem_store
    # => [current_block_height, timelock_block_height, is_timelock_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    # check timelock_block_height <= current_block_height
    lte
    # => [is_unlockable, is_timelock_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    # this is always true if the timelock is enabled, in which case the value of is_unlockable does not matter
    or assert.err=ERR_P2IDE_TIMELOCK_HEIGHT_NOT_REACHED
    # => [reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    dup push.0 eq
    # => [is_reclaim_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    exec.account::get_id dup.1 dup.1
    # => [account_id_prefix, account_id_suffix, account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix, ...]

    # determine if the current account is the target account
    movup.7 movup.7 exec.account::is_id_equal
    # => [is_target, account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height]

    if.true
        # if current account is the target, we don't need to check anything else
        # and so we just clear the stack
        dropw

    else
        # => [account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height]

        movup.2 push.1 eq
        # => [is_reclaim_disabled, account_id_prefix, account_id_suffix, reclaim_block_height]

        eq.0 assert.err=ERR_P2IDE_RECLAIM_DISABLED
        # => [account_id_prefix, account_id_suffix, reclaim_block_height]

        # if current account is not the target, we need to ensure it is the sender
        exec.note::get_sender
        # => [sender_account_id_prefix, sender_account_id_suffix, account_id_prefix, account_id_suffix, reclaim_block_height]

        # ensure current account ID = sender account ID
        exec.account::is_id_equal assert.err=ERR_P2IDE_RECLAIM_ACCT_IS_NOT_SENDER
        # => [reclaim_block_height]

        # now check that sender is allowed to reclaim, current block >= reclaim block height
        # exec.tx::get_block_number
        push.5 mem_load
        # => [current_block_height, reclaim_block_height]

        u32assert2 u32lte assert.err=ERR_P2IDE_RECLAIM_HEIGHT_NOT_REACHED
    end

    exec.add_note_assets_to_account
    # => []
end
