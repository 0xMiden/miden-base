use.miden::account
use.miden::note
use.miden::tx
use.miden::contracts::wallets::basic->wallet

#Â ERRORS
# =================================================================================================

const.ERR_P2IDH_WRONG_NUMBER_OF_INPUTS="P2IDH script expects exactly 4 note inputs"

const.ERR_P2IDH_RECLAIM_ACCT_IS_NOT_SENDER="P2IDH reclaim account not sender"

const.ERR_P2IDH_RECLAIM_HEIGHT_NOT_REACHED="P2IDH wait until reclaim height"

const.ERR_P2IDH_RECLAIM_DISABLED="P2IDH reclaim is disabled"

const.ERR_P2IDH_TIMELOCK_HEIGHT_NOT_REACHED="wait until unlock"

#! Helper procedure to add all assets of a note to an account.
#!
#! Inputs:  []
#! Outputs: []
proc.add_note_assets_to_account
    push.0 exec.note::get_assets
    # => [num_of_assets, 0 = ptr, ...]

    # compute the pointer at which we should stop iterating
    mul.4 dup.1 add
    # => [end_ptr, ptr, ...]

    # pad the stack and move the pointer to the top
    padw movup.5
    # => [ptr, 0, 0, 0, 0, end_ptr, ...]

    # compute the loop latch
    dup dup.6 neq
    # => [latch, ptr, 0, 0, 0, 0, end_ptr, ...]

    while.true
        # => [ptr, 0, 0, 0, 0, end_ptr, ...]

        # save the pointer so that we can use it later
        dup movdn.5
        # => [ptr, 0, 0, 0, 0, ptr, end_ptr, ...]

        # load the asset
        mem_loadw
        # => [ASSET, ptr, end_ptr, ...]

        # pad the stack before call
        padw swapw padw padw swapdw
        # => [ASSET, pad(12), ptr, end_ptr, ...]

        # add asset to the account
        call.wallet::receive_asset
        # => [pad(16), ptr, end_ptr, ...]

        # clean the stack after call
        dropw dropw dropw
        # => [0, 0, 0, 0, ptr, end_ptr, ...]

        # increment the pointer and compare it to the end_ptr
        movup.4 add.4 dup dup.6 neq
        # => [latch, ptr+4, ASSET, end_ptr, ...]
    end

    # clear the stack
    drop dropw drop
end

#! Hybrid Pay to ID (Optional Reclaimable & Timelockable): adds all assets from the note to the account,
#! assuming ID of the account matches target account ID specified by the note inputs OR
#! matches the sender ID if the note is consumed after the reclaim block height
#! specified by the note inputs OR the timelock block height specified by the note inputs is less than
#! the current block height.
#!
#! Both the reclaim block height and timelock block height are optional parameters.
#! If the reclaim block height and timelock block height are set both to 0, the P2IDH note
#! functions identically to the P2ID note.
#!
#! Examples:
#!
#! If reclaim block height = 4, timelock block height = 3
#! reclaiming of the note will be locked until block height = 4
#! but the target account id will be able to consume at block height = 3
#!
#! If reclaim block height = 3, timelock block height = 4
#! reclaiming of the note will be locked until block height = 4
#! At block height = 4, both sender & target will be able to consume the note
#!
#! Requires that the account exposes:
#! - miden::contracts::wallets::basic::receive_asset procedure.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Note inputs are assumed to be as follows:
#! - target_account_id is the ID of the account for which the note is intended.
#! - reclaim_block_height is the block height at which the note can be reclaimed by the sender.
#! - timelock_block_height is the block height at which the note can be consumed by the target.
#!
#! Panics if:
#! - Account does not expose miden::contracts::wallets::basic::receive_asset procedure.
#! - Before reclaim block height: account ID of executing account is not equal to specified
#!   account ID.
#! - At and after reclaim block height: account ID of executing account is not equal to
#!   specified account ID or Sender account ID.
#! - The same non-fungible asset already exists in the account.
#! - Adding a fungible asset would result in amount overflow, i.e., the total amount would be
#!   greater than 2^63.
begin

    # store the note inputs to memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is 4
    eq.4 assert.err=ERR_P2IDH_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    # read the reclaim block height, timelock_block_height and target account ID from the note inputs
    padw movup.4 mem_loadw
    # => [timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    dup push.0 neq
    # => [is_timelock_on, timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    if.true
        dup exec.tx::get_block_number
        # => [current_block_height, timelock_block_height, timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

        lte
        # => [is_unlockable, timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

        if.true
            # no operation, continue
            nop
        else
            # if not unlockable, error out
            push.0 assert.err=ERR_P2IDH_TIMELOCK_HEIGHT_NOT_REACHED
        end
        # => [timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]
    else
        # if timelock is not set, continue
        nop
    end
    # => [timelock_block_height, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    drop
    # => [reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    dup push.0 eq
    # => [is_reclaim_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix]

    exec.account::get_id dup.1 dup.1
    # => [account_id_prefix, account_id_suffix, account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height, target_account_id_prefix, target_account_id_suffix, ...]

    # determine if the current account is the target account
    movup.7 movup.7 exec.account::is_id_equal
    # => [is_target, account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height]

    if.true
        # if current account is the target, we don't need to check anything else
        # and so we just clear the stack
        dropw

    else
        # => [account_id_prefix, account_id_suffix, is_reclaim_disabled, reclaim_block_height]

        movup.2 push.1 eq
        # => [is_reclaim_disabled, account_id_prefix, account_id_suffix, reclaim_block_height]

        if.true
            push.0 assert.err=ERR_P2IDH_RECLAIM_DISABLED
        end
        # => [account_id_prefix, account_id_suffix, reclaim_block_height]

        # if current account is not the target, we need to ensure it is the sender
        exec.note::get_sender
        # => [sender_account_id_prefix, sender_account_id_suffix, account_id_prefix, account_id_suffix, reclaim_block_height]

        # ensure current account ID = sender account ID
        exec.account::is_id_equal assert.err=ERR_P2IDH_RECLAIM_ACCT_IS_NOT_SENDER
        # => [reclaim_block_height]

        # now check that sender is allowed to reclaim, current block >= reclaim block height
        exec.tx::get_block_number
        # => [current_block_height, reclaim_block_height]

        u32assert2 u32lte assert.err=ERR_P2IDH_RECLAIM_HEIGHT_NOT_REACHED
    end

    exec.add_note_assets_to_account
    # => []
end
