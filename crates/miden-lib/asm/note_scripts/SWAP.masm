use.miden::note
use.miden::tx
use.miden::contracts::wallets::basic->wallet

#Â ERRORS
# =================================================================================================

const.ERR_SWAP_WRONG_NUMBER_OF_INPUTS="SWAP script expects exactly 12 note inputs"

const.ERR_SWAP_WRONG_NUMBER_OF_ASSETS="SWAP script requires exactly 1 note asset"

#! Swap script: adds an asset from the note into consumers account and
#! creates a note consumable by note issuer containing requested ASSET.
#!
#! Requires that the account exposes:
#! - miden::contracts::wallets::basic::receive_asset procedure.
#! - miden::contracts::wallets::basic::move_asset_to_note procedure.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Note inputs are assumed to be as follows:
#! - REQUESTED_ASSET
#! - RECIPIENT
#! - note_execution_hint
#! - payback_note_type
#! - payback_note_aux
#! - payback_tag
#!
#! Panics if:
#! - account does not expose miden::contracts::wallets::basic::receive_asset procedure.
#! - account does not expose miden::contracts::wallets::basic::move_asset_to_note procedure.
#! - account vault does not contain the requested asset.
#! - adding a fungible asset would result in amount overflow, i.e., the total amount would be
#!   greater than 2^63.
begin
    dropw
    # => []

    # store the number of note assets to memory starting at address 12
    push.12 exec.note::get_assets
    # => [num_assets, ptr]

    # make sure the number of inputs is 1
    assert.err=ERR_SWAP_WRONG_NUMBER_OF_ASSETS
    # => [ptr]

    # load the ASSET
    mem_loadw
    # => [ASSET]

    # add the ASSET to the account
    call.wallet::receive_asset
    # => [pad(16)]

    # store note inputs into memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is 12
    eq.12 assert.err=ERR_SWAP_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    # load REQUESTED_ASSET
    mem_loadw
    # => [REQUESTED_ASSET]

    # load RECIPIENT
    padw mem_loadw.4
    # => [RECIPIENT, REQUESTED_ASSET]

    # load payback P2ID details
    padw mem_loadw.8
    # => [tag, aux, note_type, execution_hint, RECIPIENT, REQUESTED_ASSET]

    # create payback P2ID note
    call.tx::create_note
    # => [note_idx, REQUESTED_ASSET]

    movdn.4
    # => [REQUESTED_ASSET, note_idx]

    # move asset to the note
    call.wallet::move_asset_to_note
    # => [REQUESTED_ASSET, note_idx]

    # clean stack
    dropw dropw dropw dropw
    # => []
end
