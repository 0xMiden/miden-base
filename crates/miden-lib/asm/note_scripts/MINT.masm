use.miden::active_note
use.miden::contracts::faucets::network_fungible->faucet

# CONSTANTS
# =================================================================================================

const.MINT_NOTE_INPUTS_NUMBER=9

# ERRORS
# =================================================================================================
const.ERR_MINT_WRONG_NUMBER_OF_INPUTS="MINT script expects exactly 9 note inputs"

#! Network Faucet MINT script: mints assets by calling the network faucet's distribute function.
#! This note is intended to be executed against a network fungible faucet account.
#!
#! Requires that the account exposes:
#! - distribute procedure (from network_fungible faucet contract).
#!
#! Inputs:  [ARGS, pad(12)]
#! Outputs: [pad(16)]
#!
#! Note inputs are assumed to be as follows (in order):
#! - RECIPIENT: The recipient account ID (4 elements)
#! - Output note config (4 elements):
#!   - execution_hint: Execution hint for the output note
#!   - note_type: Type of the output note
#!   - aux: Auxiliary data for the output note
#!   - tag: Note tag for the output note
#! - amount: The amount to mint
#!
#! Panics if:
#! - account does not expose distribute procedure.
#! - the number of inputs is not exactly 9.
begin
    dropw
    # => [pad(12)]

    # Load note inputs into memory starting at address 0
    push.0 exec.active_note::get_inputs
    # => [num_inputs, inputs_ptr, pad(12)]

    # Verify we have the correct number of inputs
    eq.MINT_NOTE_INPUTS_NUMBER assert.err=ERR_MINT_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr, pad(12)]

    # Load amount
    mem_loadw.0
    # => [RECIPIENT, pad(12)]

    mem_load.4 mem_load.5 mem_load.6 mem_load.7 mem_load.8
    # => [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(12)]

    call.faucet::distribute
    # => [note_idx, pad(12)]

    # Clean up stack to return padded stack
    dropw dropw
    # => [pad(12)]
end
