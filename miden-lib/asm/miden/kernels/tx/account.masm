use.std::collections::smt
use.std::crypto::hashes::native

use.miden::kernels::tx::constants
use.miden::kernels::tx::memory

# ERRORS
# =================================================================================================

# For faucets the slot FAUCET_STORAGE_DATA_SLOT is reserved and can not be used with set_account_item
const.ERR_FAUCET_RESERVED_DATA_SLOT=0x00020000

# The nonce cannot be increased by a greater than u32 value
const.ERR_ACCOUNT_NONCE_INCR_MUST_BE_U32=0x0002003B

# Account id is invalid, insufficient 1's
const.ERR_ACCOUNT_INSUFFICIENT_ONES=0x0002003C

# Account must be updatable for it to be possible to update its code
const.ERR_ACCOUNT_SET_CODE_ACCOUNT_MUST_BE_UPDATABLE=0x0002003D

# Account seed digest mismatch
const.ERR_ACCOUNT_SEED_DIGEST_MISMATCH=0x0002003E

# Account pow is insufficient
const.ERR_ACCOUNT_INVALID_POW=0x0002003F

# Setting non-value item on a value slot
const.ERR_SETTING_NON_VALUE_ITEM_ON_VALUE_SLOT=0x00020047

# Setting a map item on a non-map slot
const.ERR_SETTING_MAP_ITEM_ON_NON_MAP_SLOT=0x00020048

# Getting a map item on a non-map slot
const.ERR_READING_MAP_VALUE_FROM_NON_MAP_SLOT=0x00020049

# Account procedure is not part of the account code
const.ERR_PROC_NOT_PART_OF_ACCOUNT_CODE=0x0002004A

# Provided index is out of bounds
const.ERR_PROC_INDEX_OUT_OF_BOUNDS=0x0002004B

# CONSTANTS
# =================================================================================================

# Given the most significant half of an account id, this mask defines the bits used to determine the account type.
const.ACCOUNT_TYPE_U32MASK=805306368 # 0b00110000_00000000_00000000_00000000

# Bit pattern for an account w/ immutable code, after the account type mask has been applied.
const.REGULAR_ACCOUNT_IMMUTABLE_CODE=0 # 0b00000000_00000000_00000000_00000000

# Bit pattern for an account w/ updatable code, after the account type mask has been applied.
const.REGULAR_ACCOUNT_UPDATABLE_CODE=268435456 # 0b00010000_00000000_00000000_00000000

# Bit pattern for a fungible faucet w/ immutable code, after the account type mask has been applied.
const.FUNGIBLE_FAUCET_ACCOUNT=536870912 # 0b00100000_00000000_00000000_00000000

# Bit pattern for a non-fungible faucet w/ immutable code, after the account type mask has been applied.
const.NON_FUNGIBLE_FAUCET_ACCOUNT=805306368 # 0b00110000_00000000_00000000_00000000

# Bit pattern for a faucet account, after the account type mask has been applied.
const.FAUCET_ACCOUNT=536870912 # 0b00100000_00000000_00000000_00000000

# Specifies a minimum number of ones for a valid account ID.
const.MIN_ACCOUNT_ONES=5

# The depth of the account storage Sparse Merkle Tree
const.STORAGE_TREE_DEPTH=8

# The depth of the account code tree
const.ACCOUNT_CODE_TREE_DEPTH=8

# The account storage slot at which faucet data is stored.
# Fungible faucet: The faucet data consists of [EMPTY_WORD, EMPTY_WORD, EMPTY_WORD, total_issuance]
# Non-fungible faucet: The faucet data consists of SMT root containing minted non-fungible assets.
const.FAUCET_STORAGE_DATA_SLOT=254

# The account storage slot at which the slot types commitment is stored.
const.SLOT_TYPES_COMMITMENT_STORAGE_SLOT=255

# The maximum value a slot type can take (An array of depth 64).
const.MAX_SLOT_TYPE=64

# The maximum number of account interface procedures.
const.MAX_NUM_PROCEDURES=65535

# EVENTS
# =================================================================================================

# Event emitted to push the index of the account procedure at the top of the operand stack onto
# the advice stack.
const.ACCOUNT_PUSH_PROCEDURE_INDEX_EVENT=131082

# CONSTANT ACCESSORS
# =================================================================================================

#! Returns the account storage slot at which faucet data is stored.
#! Fungible faucet: The faucet data consists of [EMPTY_WORD, EMPTY_WORD, EMPTY_WORD, total_issuance]
#! Non-fungible faucet: The faucet data consists of SMT root containing minted non-fungible assets.
#!
#! Stack: []
#! Output: [faucet_storage_data_slot]
#!
#! - faucet_storage_data_slot is the account storage slot at which faucet data is stored.
export.get_faucet_storage_data_slot
    push.FAUCET_STORAGE_DATA_SLOT
end

#! Returns the account storage slot at which the slot types commitment is stored.
#!
#! Stack: []
#! Output: [slot_types_commitment_storage_slot]
#!
#! - slot_types_commitment_storage_slot is the account storage slot at which the slot types
#!   commitment is stored.
export.get_slot_types_commitment_storage_slot
    push.SLOT_TYPES_COMMITMENT_STORAGE_SLOT
end

#! Returns the maximum value a slot type can take (An array of depth 64).
#!
#! Stack: []
#! Output: [max_slot_type]
#!
#! - max_slot_type is the maximum value a slot type can take (An array of depth 64).
export.get_max_slot_type
    push.MAX_SLOT_TYPE
end

#! Returns the maximum number of account interface procedures.
#!
#! Stack: []
#! Output: [max_num_procedures]
#!
#! - max_num_procedures is the maximum number of account interface procedures.
export.get_max_num_procedures
    push.MAX_NUM_PROCEDURES
end

# PROCEDURES
# =================================================================================================

#! Computes and returns the account hash from account data stored in memory.
#!
#! Stack: []
#! Output: [ACCT_HASH]
#!
#! - ACCT_HASH is the hash of the account data.
export.get_current_hash
    # prepare the stack for computing the account hash
    exec.memory::get_acct_data_ptr padw padw padw

    # stream account data and compute sequential hash. We perform two `mem_stream` operations
    # because account data consists of exactly 4 words.
    mem_stream hperm mem_stream hperm

    # extract account hash
    exec.native::state_to_digest

    # drop memory pointer
    movup.4 drop
end

#! Increments the account nonce by the provided value.
#!
#! Stack: [value]
#! Output: []
#!
#! - value is the value to increment the nonce by. value can be at most 2^32 - 1 otherwise this
#!   procedure panics.
export.incr_nonce
    u32assert.err=ERR_ACCOUNT_NONCE_INCR_MUST_BE_U32

    exec.memory::get_acct_nonce add
    exec.memory::set_acct_nonce

end

#! Returns the account id.
#!
#! Stack: []
#! Output: [acct_id]
#!
#! - acct_id is the account id.
export.memory::get_acct_id->get_id

#! Returns the account nonce.
#!
#! Stack: []
#! Output: [nonce]
#!
#! - nonce is the account nonce.
export.memory::get_acct_nonce->get_nonce

#! Returns the initial account hash.
#!
#! Stack: []
#! Output: [H]
#!
#! - H is the initial account hash.
export.memory::get_init_acct_hash->get_initial_hash

#! Returns the most significant half with the account type bits masked out.
#!
#! The accout type can be defined by comparing this value with the following constants:
#!
#! - REGULAR_ACCOUNT_UPDATABLE_CODE
#! - REGULAR_ACCOUNT_IMMUTABLE_CODE
#! - FUNGIBLE_FAUCET_ACCOUNT
#! - NON_FUNGIBLE_FAUCET_ACCOUNT
#!
#! Stack: [acct_id]
#! Output: [acct_type]
#!
#! - acct_id is the account id.
#! - acct_type is the account type.
proc.type
    u32split swap drop push.ACCOUNT_TYPE_U32MASK u32and
    # => [acct_type]
end

#! Returns a boolean indicating whether the account is a fungible faucet.
#!
#! Stack: [acct_id]
#! Output: [is_fungible_faucet]
#!
#! - acct_id is the account id.
#! - is_fungible_faucet is a boolean indicating whether the account is a fungible faucet.
export.is_fungible_faucet
    exec.type push.FUNGIBLE_FAUCET_ACCOUNT eq
    # => [is_fungible_faucet]
end

#! Returns a boolean indicating whether the account is a non-fungible faucet.
#!
#! Stack: [acct_id]
#! Output: [is_non_fungible_faucet]
#!
#! - acct_id is the account id.
#! - is_non_fungible_faucet is a boolean indicating whether the account is a non-fungible faucet.
export.is_non_fungible_faucet
    exec.type push.NON_FUNGIBLE_FAUCET_ACCOUNT eq
    # => [is_non_fungible_faucet]
end

#! Returns a boolean indicating whether the account is a faucet.
#!
#! Stack: [acct_id]
#! Output: [is_faucet]
#!
#! - acct_id is the account id.
#! - is_faucet is a boolean indicating whether the account is a faucet.
export.is_faucet
    u32split swap drop push.FAUCET_ACCOUNT u32and eq.0 not
    # => [is_faucet]
end

#! Returns a boolean indicating whether the account is a regular updatable account.
#!
#! Stack: [acct_id]
#! Output: [is_updatable_account]
#!
#! - acct_id is the account id.
#! - is_updatable_account is a boolean indicating whether the account is a regular updatable
#!   account.
export.is_updatable_account
    exec.type push.REGULAR_ACCOUNT_UPDATABLE_CODE eq
    # => [is_updatable_account]
end

#! Returns a boolean indicating whether the account is a regular immutable account.
#!
#! Stack: [acct_id]
#! Output: [is_immutable_account]
#!
#! - acct_id is the account id.
#! - is_immutable_account is a boolean indicating whether the account is a regular immutable
#!   account.
export.is_immutable_account
    exec.type push.REGULAR_ACCOUNT_IMMUTABLE_CODE eq
    # => [is_immutable_account]
end

#! Validates an account id. Panics if the account id is invalid.
#! Account id must have at least `MIN_ACCOUNT_ONES` ones.
#!
#! Stack: [acct_id]
#! Output: []
#!
#! - acct_id is the account id.
export.validate_id
    # split felt into 32 bit limbs
    u32split
    # => [l_1, l_0]

    # count the number of 1 bits
    u32popcnt swap u32popcnt add
    # => [ones]

    # check if the number of ones is at least MIN_ACCOUNT_ONES ones.
    push.MIN_ACCOUNT_ONES u32gte assert.err=ERR_ACCOUNT_INSUFFICIENT_ONES
end

#! Sets the code of the account the transaction is being executed against. This procedure can only
#! executed on regular accounts with updatable code. Otherwise, this procedure fails.
#!
#! Stack: [CODE_COMMITMENT]
#! Output: []
#!
#! - CODE_COMMITMENT is the hash of the code to set.
export.set_code
    # get the account id
    exec.memory::get_acct_id
    # => [acct_id, CODE_COMMITMENT]

    # assert the account is an updatable regular account
    exec.is_updatable_account assert.err=ERR_ACCOUNT_SET_CODE_ACCOUNT_MUST_BE_UPDATABLE
    # => [CODE_COMMITMENT]

    # set the code commitment
    exec.memory::set_new_acct_code_commitment dropw
    # => []
end

#! Returns the type info (slot type, entry arity) of the slot at the provided index.
#!
#! Stack: [idx]
#! Output: [entry_arity, slot_type]
#!
#! - idx is the index of the slot to get the type info of.
#! - slot_type is the type of the slot.
#! - entry_arity is the arity of the slot.
export.get_storage_slot_type_info
    exec.memory::get_acct_storage_slot_type_data u32split
end

#! Gets an item from the account storage. Panics if the index is out of bounds.
#!
#! Stack: [index]
#! Output: [VALUE]
#!
#! - index is the index of the item to get.
#! - VALUE is the value of the item.
export.get_item
    # get the storage root
    exec.memory::get_acct_storage_root
    # => [STORAGE_ROOT, index]

    # get the item from storage
    movup.4 push.STORAGE_TREE_DEPTH mtree_get
    # => [VALUE, ROOT]

    # drop the root
    swapw dropw
    # => [VALUE]
end

#! Returns VALUE located under specified KEY in map in specified account storage slot.
#! Panics if
#! - the index is out of bounds (>255).
#! - the requested storage slot type is not map
#!
#! Stack: [index, KEY]
#! Output: [VALUE, ROOT]
#!
#! - index is the index of the item to get.
#! - KEY is the key to get
#! - ROOT is the root of the map to get the KEY VALUE pair from
#! - VALUE is the value of the item.
export.get_map_item
    # check if storage type is map
    dup exec.get_storage_slot_type_info drop
    # => [slot_type, index, KEY, ...]

    # fails if slot_type is not 1 = map
    exec.constants::get_storage_slot_type_map eq assert.err=ERR_READING_MAP_VALUE_FROM_NON_MAP_SLOT
    # => [index, KEY, ...]

    # fetch the account storage item, which is ROOT of the map
    exec.get_item swapw
    # => [KEY, ROOT ...]

    # fetch the VALUE located under KEY in the tree
    exec.smt::get
    # => [VALUE, ROOT, ...]
end

#! Sets an item in the account storage. Doesn't emit any events.
#!
#! Stack: [index, NEW_VALUE]
#! Output: [OLD_VALUE]
#!
#! - index is the index of the item to set.
#! - NEW_VALUE is the value to set.
#! - OLD_VALUE is the previous value of the item.
#! - OLD_ROOT is the old storage root.
#! - NEW_ROOT is the new storage root.
export.set_item_raw
    # get the storage root
    exec.memory::get_acct_storage_root
    # => [OLD_ROOT, index, NEW_VALUE]

    # set the item in storage
    movup.4 push.STORAGE_TREE_DEPTH mtree_set
    # => [OLD_VALUE, NEW_ROOT]

    # set the new storage root
    swapw exec.memory::set_acct_storage_root dropw
    # => [OLD_VALUE]
end

#! Sets an item in the account storage. Panics if
#! - the index is out of bounds
#! - the slot type is not value
#!
#! Stack: [index, NEW_VALUE]
#! Output: [OLD_VALUE]
#!
#! - index is the index of the item to set.
#! - NEW_VALUE is the value to set.
#! - OLD_VALUE is the previous value of the item.
export.set_item
    # if the transaction is being executed against a faucet account then assert
    # index != FAUCET_STORAGE_DATA_SLOT (reserved slot)
    dup exec.get_faucet_storage_data_slot eq
    exec.memory::get_acct_id exec.is_faucet
    and assertz.err=ERR_FAUCET_RESERVED_DATA_SLOT
    # => [index, NEW_VALUE]

    # check if storage type is slot
    dup exec.memory::get_acct_storage_slot_type_data u32split drop
    # => [slot_type, index, NEW_VALUE]

    # fails if slot_type is not 0 = value
    exec.constants::get_storage_slot_type_value eq assert.err=ERR_SETTING_NON_VALUE_ITEM_ON_VALUE_SLOT
    # => [index, NEW_VALUE]

    # set NEW_VALUE in the storage slot at index
    exec.set_item_raw
    # => [OLD_VALUE]
end

#! Sets an item in the specified account storage map.
#!
#! Stack: [index, KEY, NEW_VALUE, OLD_MAP_ROOT, ...]
#! Output: [OLD_VALUE, NEW_ROOT, ...]
#!
#! - OLD_ROOT is the root of the map to set the KEY NEW_VALUE pair.
#! - NEW_VALUE is the value to set under KEY.
#! - KEY is the key to set.
#! - OLD_VALUE is the previous value of the item.
#! - NEW_ROOT is the new root of the map.
#!
#! Panics if
#! - the slot type is not map
#! - no map is found for ROOT
export.set_map_item.1
    # store index for later
    dup loc_store.0
    # => [index, KEY, NEW_VALUE, ...]

    # check if storage type is map
    dup exec.memory::get_acct_storage_slot_type_data u32split drop
    # => [slot_type, index, KEY, NEW_VALUE, OLD_ROOT]

    # fails if slot_type is not 1 = map
    exec.constants::get_storage_slot_type_map eq assert.err=ERR_SETTING_MAP_ITEM_ON_NON_MAP_SLOT
    # => [index, KEY, NEW_VALUE, OLD_ROOT]

    # set the NEW_VALUE under KEY in the tree
    # note smt::set expects the stack to be [NEW_VALUE, KEY, OLD_ROOT, ...]
    drop swapw exec.smt::set
    # => [OLD_VALUE, NEW_ROOT, ...]

    # prepare stack to set the new root in the account slot
    swapw loc_load.0
    # => [index, NEW_ROOT, OLD_VALUE, ...]

    # set the root of the map in the respective account storage slot
    exec.set_item_raw
    # => [OLD_MAP_ROOT, OLD_VALUE, ...]
end

#! Returns the procedure information
#!
#! Stack: [index, ...]
#! Output: [PROC_ROOT, storage_offset, ...]
#!
#! - PROC_ROOT is the hash of the procedure.
#! - storage_offset is the procedure storage offset.
#!
#! Panics if
#! - index is out of bounds
export.get_procedure_info
  # TODO: Fix VM caller == [0,0,0,0] bug and remove this check
  # check if index == 255
  dup push.255 neq
  # => [is_255, index]

  # load procedure information from memory
  if.true
    # check that index < number of procedures contained in the account code
    dup exec.memory::get_num_account_procedures lt assert.err=ERR_PROC_INDEX_OUT_OF_BOUNDS
    # => [index]

    # get procedure section ptr
    push.2 mul exec.memory::get_account_procedures_section_offset add dup push.1 add
    # => [proc_ptr, offset_ptr]

    # load procedure information from memory
    mem_load swap padw movup.4 mem_loadw
    # => [PROC_ROOT, storage_offset]
  end
 end

#! Verifies that the procedure root is part of the account code
#!
#! Stack: [PROC_ROOT]
#! Output: [storage_offset]
#!
#! - PROC_ROOT is the hash of the procedure to authenticate.
#!
#! Panics if
#! - procedure root is not part of the account code.
export.authenticate_procedure
    # load procedure index
    emit.ACCOUNT_PUSH_PROCEDURE_INDEX_EVENT adv_push.1
    # => [index, PROC_ROOT]

    # get procedure info (PROC_ELEMENTS, storage_offset) from memory stored at index
    exec.get_procedure_info
    # In production:
    # => [PROC_ELEMENTS, storage_offset, PROC_ROOT]
    # During testing:
    # => [255, PROC_ROOT]

    # TODO: Fix VM caller == [0,0,0,0] bug and remove this check
    # check if get_procedure_info returned 255
    dup push.255 neq
    # => [is_255, index, PROC_ROOT]

    # verify that PROC_ROOT matches returned procedure information
    if.true
      # verify that PROC_ROOT exists in memory at index
      movup.4 movdn.8 assert_eqw.err=ERR_PROC_NOT_PART_OF_ACCOUNT_CODE
      # => [storage_offset]
    else
      # drop PROC_ROOT
      movdn.4 dropw
    end
end

#! Validates that the account seed, provided via the advice map, satisfies the seed requirements.
#!
#! Validation is performed via the following steps:
#! 1. compute the hash of (SEED, CODE_commitment, STORAGE_ROOT, 0, 0, 0, 0)
#! 2. Assert the least significant element of the digest is equal to the account id of the account
#!    the transaction is being executed against.
#! 3. Assert the most significant element has sufficient proof of work (trailing zeros) for the account
#!    type the transaction is being executed against.
#!
#! Stack: []
#! Output: []
export.validate_seed
        # pad capacity elements of hasher and populate first four elements of the rate with the account id seed
        padw exec.memory::get_acct_id push.0.0.0 adv.push_mapval adv_loadw
        # => [SEED, 0, 0, 0, 0]

        # populate last four elements of the hasher rate with the code commitment
        exec.memory::get_acct_code_commitment
        # => [CODE_COMMITMENT, SEED, 0, 0, 0, 0]

        # perform first permutation of seed and code_commitment (from advice stack) perm(seed, code_commitment)
        hperm
        # => [RATE, RATE, PERM]

        # clear rate elements
        dropw dropw
        # => [PERM]

        # perform second permutation perm(storage_root, 0, 0, 0, 0)
        exec.memory::get_acct_storage_root padw hperm
        # => [RATE, RATE, CAP]

        # extract digest
        exec.native::state_to_digest
        # => [DIG]

        # assert the account id matches the account id of the new account and extract pow
        # element
        movdn.3 drop drop exec.memory::get_acct_id eq assert.err=ERR_ACCOUNT_SEED_DIGEST_MISMATCH
        # => [pow]

        # get acct and faucet modulus to check the min number of trailing zeros required in the pow
        exec.constants::get_regular_account_seed_digest_modulus exec.constants::get_faucet_seed_digest_modulus
        # => [faucet_modulus, acct_modulus, pow]

        exec.memory::get_acct_id
        # => [acct_id, faucet_modulus, acct_modulus, pow]

        exec.is_faucet
        # => [is_faucet, faucet_modulus, acct_modulus, pow]

        # select the appropriate modulus based on the account type
        cdrop swap
        # => [pow, modulus]

        # assert that the pow is valid
        u32split drop swap u32divmod assertz.err=ERR_ACCOUNT_INVALID_POW drop
        # => []
end
