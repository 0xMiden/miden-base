use.miden::account
use.miden::tx

#Â CONSTANTS
# =================================================================================================
const.PUBLIC_NOTE=1

#! Adds the provided asset to the current account.
#!
#! Inputs: [ASSET]
#! Outputs: [0, 0, 0, 0, ...]
#!
#! - ASSET is the asset to be received, can be fungible or non-fungible
#!
#! FAILS if:
#! - The same non-fungible asset already exists in the account.
#! - Adding a fungible asset would result in amount overflow, i.e.,
#!   the total amount would be greater than 2^63.
export.receive_asset
    exec.account::add_asset
    padw swapw dropw
end

#! Creates a note which sends the specified asset out of the current account
#! to the specified recipient.
#!
#! Inputs: [ASSET, tag, aux, note_type, RECIPIENT, ...]
#! Outputs: [note_ptr, ZERO, ZERO, 0, 0, ...]
#!
#! - ASSET is the non-fungible asset of interest.
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary data to be included in the note.
#! - note_type is the note's storage type
#! - RECIPIENT is the recipient of the note, i.e.,
#!   hash(hash(hash(serial_num, [0; 4]), script_hash), input_hash)
#! - note_ptr is the pointer to the memory address in the kernel.
#!   This cannot directly be accessed from another context.
#!
#! Panics:
#! - The fungible asset is not found in the vault.
#! - The amount of the fungible asset in the vault is less than the amount to be removed.
#! - The non-fungible asset is not found in the vault.
export.send_asset.1
    exec.account::remove_asset
    # => [ASSET, tag, aux, note_type, RECIPIENT, ...]

    # Store the ASSET for later 
    loc_storew.0 dropw
    # => [tag, aux, note_type, RECIPIENT, ...]

    # This procedure is written to be executed with `exec` or `call`. When this
    # procedure is `call`ed the stack has to be carefully manipulated to avoid
    # inserting unwanted elements between the user data. The convention is to
    # ensure the input&output data have the same length. This code pads the
    # stack so the output stack will be the same length as the the input.
    #
    # The padding must be added before calling `create_note`, not after. This
    # is because the VM stack has a minimum size of 16 elements, trying to push
    # elements after the call to `create_note` would increase the stack in
    # addition to the minimum 16 elements.
    push.0 movdn.7 padw movdnw.2 padw movdnw.2
    # => [tag, aux, note_type, RECIPIENT, 0, ZERO, ZERO, ...]

    exec.tx::create_note
    # => [note_ptr, 0, ZERO, ZERO, ...]
    
    padw loc_loadw.0 movup.4
    # => [note_ptr, ASSET, 0, ZERO, ZERO, ...]

    exec.tx::move_asset_to_note
    # => [note_ptr, 0, ZERO, ZERO, ...]

    # need to do this to make the tests work. Is there a padding issue still?
    movup.15 drop movup.15 drop
end
