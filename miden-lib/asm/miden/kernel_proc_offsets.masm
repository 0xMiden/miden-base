# OFFSET CONSTANTS
# -------------------------------------------------------------------------------------------------

### Account #####################################
# Entire account hash
const.ACCOUNT_GET_CURRENT_HASH_OFFSET=0
const.ACCOUNT_GET_INITIAL_HASH_OFFSET=1

# ID
const.ACCOUNT_GET_ID_OFFSET=2

# Nonce
const.ACCOUNT_GET_NONCE_OFFSET=3                 # accessor
const.ACCOUNT_INCR_NONCE_OFFSET=4                # mutator

# Procedures
## get account code is missing
const.ACCOUNT_PROCEDURES_SET_CODE_OFFSET=5

# Storage
const.ACCOUNT_STORAGE_GET_ITEM_OFFSET=6
const.ACCOUNT_STORAGE_SET_ITEM_OFFSET=7
const.ACCOUNT_STORAGE_GET_MAP_ITEM_OFFSET=8
const.ACCOUNT_STORAGE_SET_MAP_ITEM_OFFSET=9

# Vault
const.ACCOUNT_VAULT_ADD_ASSET_OFFSET=10
const.ACCOUNT_VAULT_REMOVE_ASSET_OFFSET=11
const.ACCOUNT_VAULT_GET_BALANCE_OFFSET=12
const.ACCOUNT_VAULT_HAS_NON_FUNGIBLE_ASSET_OFFSET=13

## set commitment is missing, but corresponding memory procedure is used in the
## start_foreign_context kernel procedure
const.ACCOUNT_VAULT_GET_COMMITMENT_OFFSET=14


### Faucet ######################################
const.FAUCET_BURN_ASSET_OFFSET=15
const.FAUCET_FUNGIBLE_GET_TOTAL_ISSUANCE_OFFSET=16

# add a new procedure to the kernel
# const.FAUCET_NON_FUNGIBLE_IS_ISSUED_OFFSET=17
const.FAUCET_MINT_ASSET_OFFSET=18


### Note ########################################
# creation 
const.NOTE_CREATION_OFFSET=19

# io commitments
const.NOTE_GET_INPUT_NOTES_COMMITMENT_OFFSET=20
const.NOTE_GET_OUTPUT_NOTES_COMMITMENT_OFFSET=21

# assets
const.NOTE_ADD_ASSET_OFFSET=22                   # mutator
const.NOTE_GET_ASSETS_INFO_OFFSET=23             # accessor

# note parameters
const.NOTE_GET_SERIAL_NUMBER_OFFSET=24
const.NOTE_GET_INPUTS_HASH_OFFSET=25
const.NOTE_GET_SENDER_OFFSET=26
const.NOTE_GET_SCRIPT_HASH_OFFSET=27


### Tx ##########################################
# block info
const.TX_GET_BLOCK_HASH_OFFSET=28
const.TX_GET_BLOCK_NUMBER_OFFSET=29

# foreign context
const.TX_START_FOREIGN_CONTEXT_OFFSET=30
const.TX_END_FOREIGN_CONTEXT_OFFSET=31

# expiration data
const.TX_UPDATE_EXPIRATION_BLOCK_NUM_OFFSET=32   # mutator
const.TX_GET_EXPIRATION_DELTA_OFFSET=33          # accessor


# ACCESSORS
# -------------------------------------------------------------------------------------------------

### ACCOUNT #####################################

#! Returns an offset of the `get_current_account_hash` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_current_account_hash` kernel procedure required to get
#!   the address where this procedure is stored.
export.get_current_account_hash_offset
    push.ACCOUNT_GET_CURRENT_HASH_OFFSET
end

#! Returns an offset of the `get_initial_account_hash` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_initial_account_hash` kernel procedure required to get
#!   the address where this procedure is stored.
export.get_initial_account_hash_offset
    push.ACCOUNT_GET_INITIAL_HASH_OFFSET
end

#! Returns an offset of the `get_account_id` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_account_id` kernel procedure required to get the address
#!   where this procedure is stored.
export.get_account_id_offset
    push.ACCOUNT_GET_ID_OFFSET
end

#! Returns an offset of the `get_account_nonce` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_account_nonce` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_account_nonce_offset
    push.ACCOUNT_GET_NONCE_OFFSET
end

#! Returns an offset of the `incr_account_nonce` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `incr_account_nonce` kernel procedure required to get the
#!   address where this procedure is stored.
export.incr_account_nonce_offset
    push.ACCOUNT_INCR_NONCE_OFFSET
end

#! Returns an offset of the `set_account_code` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `set_account_code` kernel procedure required to get the
#!   address where this procedure is stored.
export.set_account_code_offset
    push.ACCOUNT_PROCEDURES_SET_CODE_OFFSET
end

#! Returns an offset of the `get_account_item` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_account_item` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_account_item_offset
    push.ACCOUNT_STORAGE_GET_ITEM_OFFSET
end

#! Returns an offset of the `set_account_item` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `set_account_item` kernel procedure required to get the
#!   address where this procedure is stored.
export.set_account_item_offset
    push.ACCOUNT_STORAGE_SET_ITEM_OFFSET
end

#! Returns an offset of the `get_account_map_item` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_account_map_item` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_account_map_item_offset
    push.ACCOUNT_STORAGE_GET_MAP_ITEM_OFFSET
end

#! Returns an offset of the `set_account_map_item` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `set_account_map_item` kernel procedure required to get the
#!   address where this procedure is stored.
export.set_account_map_item_offset
    push.ACCOUNT_STORAGE_SET_MAP_ITEM_OFFSET
end

#! Returns an offset of the `account_vault_add_asset` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `account_vault_add_asset` kernel procedure required to get the
#!   address where this procedure is stored.
export.account_vault_add_asset_offset
    push.ACCOUNT_VAULT_ADD_ASSET_OFFSET
end

#! Returns an offset of the `account_vault_remove_asset` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `account_vault_remove_asset` kernel procedure required to get
#!   the address where this procedure is stored.
export.account_vault_remove_asset_offset
    push.ACCOUNT_VAULT_REMOVE_ASSET_OFFSET
end

#! Returns an offset of the `account_vault_get_balance` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `account_vault_get_balance` kernel procedure required to get
#!   the address where this procedure is stored.
export.account_vault_get_balance_offset
    push.ACCOUNT_VAULT_GET_BALANCE_OFFSET
end

#! Returns an offset of the `account_vault_has_non_fungible_asset` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `account_vault_has_non_fungible_asset` kernel procedure
#!   required to get the address where this procedure is stored.
export.account_vault_has_non_fungible_asset_offset
    push.ACCOUNT_VAULT_HAS_NON_FUNGIBLE_ASSET_OFFSET
end

#! Returns an offset of the `get_account_vault_commitment` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_account_vault_commitment` kernel procedure required to
#!   get the address where this procedure is stored.
export.get_account_vault_commitment_offset
    push.ACCOUNT_VAULT_GET_COMMITMENT_OFFSET
end


### FAUCET ######################################

#! Returns an offset of the `burn_asset` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `burn_asset` kernel procedure required to get the address
#!   where this procedure is stored.
export.burn_asset_offset
    push.FAUCET_BURN_ASSET_OFFSET
end

#! Returns an offset of the `get_fungible_faucet_total_issuance` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_fungible_faucet_total_issuance` kernel procedure required
#!   to get the address where this procedure is stored.
export.get_fungible_faucet_total_issuance_offset
    push.FAUCET_FUNGIBLE_GET_TOTAL_ISSUANCE_OFFSET
end

#! Returns an offset of the `mint_asset` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `mint_asset` kernel procedure required to get the address
#!   where this procedure is stored.
export.mint_asset_offset
    push.FAUCET_MINT_ASSET_OFFSET
end


### NOTE ########################################

#! Returns an offset of the `create_note` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `create_note` kernel procedure required to get the address
#!   where this procedure is stored.
export.create_note_offset
    push.NOTE_CREATION_OFFSET
end

#! Returns an offset of the `get_input_notes_commitment` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_input_notes_commitment` kernel procedure required to get
#!   the address where this procedure is stored.
export.get_input_notes_commitment_offset
    push.NOTE_GET_INPUT_NOTES_COMMITMENT_OFFSET
end

#! Returns an offset of the `get_output_notes_commitment` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_output_notes_commitment` kernel procedure required to get
#!   the address where this procedure is stored.
export.get_output_notes_commitment_offset
    push.NOTE_GET_OUTPUT_NOTES_COMMITMENT_OFFSET
end

#! Returns an offset of the `add_asset_to_note` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `add_asset_to_note` kernel procedure required to get the
#!   address where this procedure is stored.
export.add_asset_to_note_offset
    push.NOTE_ADD_ASSET_OFFSET
end

#! Returns an offset of the `get_note_assets_info` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_note_assets_info` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_note_assets_info_offset
    push.NOTE_GET_ASSETS_INFO_OFFSET
end

#! Returns an offset of the `get_note_serial_number` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_note_serial_number` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_note_serial_number_offset
    push.NOTE_GET_SERIAL_NUMBER_OFFSET
end

#! Returns an offset of the `get_note_inputs_hash` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_note_inputs_hash` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_note_inputs_hash_offset
    push.NOTE_GET_INPUTS_HASH_OFFSET
end

#! Returns an offset of the `get_note_sender` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_note_sender` kernel procedure required to get the address
#!   where this procedure is stored.
export.get_note_sender_offset
    push.NOTE_GET_SENDER_OFFSET
end

#! Returns an offset of the `get_script_hash` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_script_hash` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_script_hash_offset
    push.NOTE_GET_SCRIPT_HASH_OFFSET
end


### TRANSACTION #################################

#! Returns an offset of the `get_block_hash` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_block_hash` kernel procedure required to get the address
#!   where this procedure is stored.
export.get_block_hash_offset
    push.TX_GET_BLOCK_HASH_OFFSET
end

#! Returns an offset of the `get_block_number` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `get_block_number` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_block_number_offset
    push.TX_GET_BLOCK_NUMBER_OFFSET
end

#! Returns an offset of the `start_foreign_context` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `start_foreign_context` kernel procedure required to get the
#!   address where this procedure is stored.
export.start_foreign_context_offset
    push.TX_START_FOREIGN_CONTEXT_OFFSET
end

#! Returns an offset of the `end_foreign_context` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `end_foreign_context` kernel procedure required to get the
#!   address where this procedure is stored.
export.end_foreign_context_offset
    push.TX_END_FOREIGN_CONTEXT_OFFSET
end

#! Returns an offset of the `update_expiration_block_num` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `set_tx_expiration_delta` kernel procedure required to get the
#!   address where this procedure is stored.
export.update_expiration_block_num_offset
    push.TX_UPDATE_EXPIRATION_BLOCK_NUM_OFFSET
end

#! Returns an offset of the `get_expiration_delta` kernel procedure.
#!
#! Inputs:  []
#! Outputs: [proc_offset]
#!
#! Where:
#! - proc_offset is the offset of the `set_tx_expiration_delta` kernel procedure required to get the
#!   address where this procedure is stored.
export.get_expiration_block_delta_offset
    push.TX_GET_EXPIRATION_DELTA_OFFSET
end
