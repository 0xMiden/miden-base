use.miden::kernel_proc_offsets

#! Returns the block number of the last known block at the time of transaction execution.
#!
#! Inputs:  []
#! Outputs: [num]
#!
#! Where:
#! - num is the last known block number.
#!
#! Invocation: exec
export.get_block_number
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::tx_get_block_number_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [num, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [num]
end

#! Returns the block hash of the reference block.
#!
#! Inputs:  [EMPTY_WORD]
#! Outputs: [BLOCK_HASH]
#!
#! Where:
#! - BLOCK_HASH, reference block for the transaction execution.
#!
#! Invocation: exec
export.get_block_hash
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::tx_get_block_hash_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [BLOCK_HASH, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [BLOCK_HASH]
end

#! Returns the input notes commitment hash.
#!
#! See `transaction::api::get_input_notes_commitment` for details.
#!
#! Inputs:  []
#! Outputs: [INPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - INPUT_NOTES_COMMITMENT is the input notes commitment hash.
#!
#! Invocation: exec
export.get_input_notes_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::tx_get_input_notes_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [INPUT_NOTES_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INPUT_NOTES_COMMITMENT]
end

#! Returns the output notes hash. This is computed as a sequential hash of (note_id, note_metadata)
#! tuples over all output notes.
#!
#! Inputs:  [0, 0, 0, 0]
#! Outputs: [COMMITMENT]
#!
#! Where:
#! - COMMITMENT is the output notes hash.
#!
#! Invocation: exec
export.get_output_notes_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::tx_get_output_notes_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [COMMITMENT]
end

#! Creates a new note and returns the index of the note.
#!
#! Inputs:  [tag, aux, note_type, execution_hint, RECIPIENT]
#! Outputs: [note_idx]
#!
#! Where:
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary metadata to be included in the note.
#! - note_type is the storage type of the note.
#! - execution_hint is the note's execution hint.
#! - RECIPIENT is the recipient of the note.
#! - note_idx is the index of the created note.
#!
#! Invocation: exec
export.create_note
    # pad the stack before the syscall to prevent accidental modification of the deeper stack
    # elements
    padw padw swapdw movup.8 drop
    # => [tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    exec.kernel_proc_offsets::tx_create_note_offset
    # => [offset, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    syscall.exec_kernel_proc
    # => [note_idx, pad(15)]

    # remove excess PADs from the stack
    swapdw dropw dropw movdn.7 dropw drop drop drop
    # => [note_idx]
end

#! Adds the ASSET to the note specified by the index.
#!
#! Inputs:  [ASSET, note_idx]
#! Outputs: [ASSET, note_idx]
#!
#! Where:
#! - note_idx is the index of the note to which the asset is added.
#! - ASSET can be a fungible or non-fungible asset.
#!
#! Invocation: exec
export.add_asset_to_note
    movup.4 exec.kernel_proc_offsets::note_add_asset_offset
    # => [offset, note_idx, ASSET]

    # pad the stack before the syscall to prevent accidental modification of the deeper stack
    # elements
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, note_idx, ASSET, pad(10)]

    syscall.exec_kernel_proc
    # => [note_idx, ASSET, pad(11)]

    # remove excess PADs from the stack
    swapdw dropw dropw swapw movdn.7 drop drop drop movdn.4
    # => [ASSET, note_idx]
end

#! Returns the RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and inputs hash
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, INPUT_HASH]
#! Outputs: [RECIPIENT]
#!
#! Where:
#! - SERIAL_NUM is the serial number of the recipient.
#! - SCRIPT_HASH is the commitment of the note script.
#! - INPUT_HASH is the commitment of the note inputs.
#! - RECIPIENT is the recipient of the note.
#!
#! Invocation: exec
export.build_recipient_hash
  padw hmerge
  # => [SERIAL_NUM_HASH, SCRIPT_HASH, INPUT_HASH]

  swapw hmerge
  # => [MERGE_SCRIPT, INPUT_HASH]

  swapw hmerge
  # [RECIPIENT]
end

#! Executes the provided procedure against the foreign account.
#!
#! WARNING: the procedure to be invoked can not have more than 15 inputs and it can not return more
#! than 15 elements back. Otherwise exceeding elements will not be provided to the procedure and
#! will not be returned from it.
#!
#! Inputs:  [foreign_account_id_prefix, foreign_account_id_suffix, FOREIGN_PROC_ROOT, <foreign account inputs>, pad(n)]
#! Outputs: [<values returned from the foreign procedure>]
#!
#! Where:
#! - foreign_account_id_{prefix,suffix} are the prefix and suffix felts of the account ID of the foreign
#!   account to execute the procedure on.
#! - pad(n) is the exact number of pads needed to set the number of procedure inputs to 16 at the 
#!   moment of the foreign procedure execution (n = 16 - mem_addr_size - foreign_inputs_len).
#!
#! Invocation: exec
export.execute_foreign_procedure.4
    # get the start_foreign_context procedure offset
    push.0 movup.2 movup.2 exec.kernel_proc_offsets::tx_start_foreign_context_offset
    # => [offset, foreign_account_id_prefix, foreign_account_id_suffix, 0, FOREIGN_PROC_ROOT, <foreign account inputs>, pad(n)]

    # pad the stack before the syscall
    padw swapw padw padw swapdw
    # => [offset, foreign_account_id_prefix, foreign_account_id_suffix, pad(13), FOREIGN_PROC_ROOT, <foreign account inputs>, pad(n)]

    # load the foreign account to the memory
    syscall.exec_kernel_proc
    # => [pad(16), FOREIGN_PROC_ROOT, <foreign account inputs>, pad(n)]

    # prepare the stack for the dyncall
    dropw dropw dropw dropw
    # => [FOREIGN_PROC_ROOT, <foreign account inputs>, pad(n)]

    # store the foreign procedure root to the first local memory slot and get its absolute memory 
    # address
    loc_storew.0 dropw locaddr.0
    # => [foreign_proc_root_ptr, <foreign account inputs>, pad(n)]

    # execute the foreign procedure
    dyncall
    # => [<values returned from the foreign procedure>]

    # reset the current account data offset to the native offset (2048)
    push.0.0.0 padw padw padw
    exec.kernel_proc_offsets::tx_end_foreign_context_offset
    # => [offset, pad(15), <values returned from the foreign procedure>]

    syscall.exec_kernel_proc
    dropw dropw dropw dropw
    # => [<values returned from the foreign procedure>]
end

#! Updates the transaction expiration delta.
#!
#! The transaction expiration delta specifies how close to the transaction's reference block the
#! transaction must be included into the chain. For example, if the transaction's reference block is
#! 100 and transaction expiration delta is 10, the transaction can be included into the chain by
#! block 110. If this does not happen, the transaction is considered expired and cannot be included
#! into the chain.
#!
#! Once set, transaction expiration delta can be decreased, but not increased.
#!
#! Inputs: [block_height_delta, ...]
#! Output: [...]
#!
#! Where:
#! - block_height_delta is the desired expiration time delta (1 to 0xFFFF).
#!
#! Annotation hint: is not used anywhere
export.update_expiration_block_delta
    exec.kernel_proc_offsets::tx_update_expiration_block_num_offset
    # => [offset, expiration_delta, ...]

    # pad the stack
    push.0 movdn.2 push.0 movdn.2 padw swapw padw padw swapdw
    # => [offset, expiration_delta, pad(14)]

    syscall.exec_kernel_proc

    # clear the stack
    dropw dropw dropw dropw
end

#! Returns the transaction expiration delta, or 0 if the delta has not been set.
#!
#! Inputs: [...]
#! Output: [block_height_delta, ...]
#!
#! Where:
#! - block_height_delta is the stored expiration time delta (1 to 0xFFFF).
#!
#! Annotation hint: is not used anywhere
export.get_expiration_block_delta
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::tx_get_expiration_delta_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [expiration_delta, pad(15)]

    # clear the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [expiration_delta]
end
