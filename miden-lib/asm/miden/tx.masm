#! Returns the block number of the last known block at the time of transaction execution.
#!
#! Inputs: []
#! Outputs: [num]
#!
#! num is the last known block number.
export.get_block_number
    push.0
    # => [0]

    syscall.get_block_number
    # => [num]
end

#! Returns the block hash of the reference block.
#!
#! Stack: [ZERO]
#! Output: [BLOCK_HASH]
#!
#! Where:
#! - BLOCK_HASH, reference block for the transaction execution.
export.get_block_hash
    padw syscall.get_block_hash
    # => [BLOCK_HASH]
end

#! Returns the input notes commitment hash.
#!
#! See `transaction::api::get_input_notes_commitment` for details.
#!
#! Stack: []
#! Outputs: [INPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - INPUT_NOTES_COMMITMENT is the input notes commitment hash.
export.get_input_notes_commitment
    padw syscall.get_input_notes_commitment
    # => [INPUT_NOTES_COMMITMENT]
end

#! Returns the output notes hash. This is computed as a sequential hash of (note_hash, note_metadata)
#! tuples over all output notes.
#!
#! Inputs: [0, 0, 0, 0]
#! Outputs: [COM]
#!
#! COM is the output notes hash.
export.get_output_notes_hash
    padw
    # => [0, 0, 0, 0]

    syscall.get_output_notes_hash
    # => [COM]
end

#! Creates a new note and returns the index of the note.
#!
#! Inputs: [tag, note_type, RECIPIENT]
#! Outputs: [note_idx]
#!
#! tag is the tag to be included in the note.
#! note_type is the storage type of the note
#! RECIPIENT is the recipient of the note.
#! note_idx is the index of the the note to which the asset is added.
export.create_note
    syscall.create_note
    # => [note_idx, ZERO, 0]

    # clear the padding from the kernel response
    movdn.4 dropw swap drop
    # => [note_idx]
end

#! Adds an ASSET to the specified note and returns the index index of the note
#! at which the asset is added.
#!
#! Inputs: [note_idx, ASSET]
#! Outputs: [note_idx]
#!
#! note_idx is the index of the the note to which the asset is added.
#! ASSET can be a fungible or non-fungible asset.
export.add_asset_to_note
    syscall.add_asset_to_note
    # => [note_idx, ZERO]

    # clear the padding from the kernel response
    movdn.4 dropw
    # => [note_idx]
end

#! Returns the RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and input
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, input]
#! Outputs: [RECIPIENT]
#!
#! Only allows a single input currently
export.build_recipient_hash
  padw hmerge
  # => [SERIAL_NUM_HASH, SCRIPT_HASH, input]

# merge SERIAL_NUM_HASH and SCRIPT_HASH
  swapw hmerge
  # => [SERIAL_SCRIPT_HASH, input]

  # compute the INPUT_HASH. Note: only one input is allowed
  swapw swap.3 padw hmerge
  # => [INPUT_HASH, SERIAL_SCRIPT_HASH]

  hmerge
  # [RECIPIENT]
end
