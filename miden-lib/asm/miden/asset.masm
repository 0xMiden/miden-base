use.miden::account

#Â ERRORS
# =================================================================================================

# Failed to build the fungible asset because the provided faucet id is not from a fungible faucet
const.ERR_FUNGIBLE_ASSET_PROVIDED_FAUCET_ID_IS_INVALID=0x0002004B

# Fungible asset build operation called with amount that exceeds the maximum allowed asset amount
const.ERR_FUNGIBLE_ASSET_AMOUNT_EXCEEDS_MAX_ALLOWED_AMOUNT=0x0002004C

# Failed to build the non-fungible asset because the provided faucet id is not from a non-fungible faucet
const.ERR_NON_FUNGIBLE_ASSET_PROVIDED_FAUCET_ID_IS_INVALID=0x0002004D

# CONSTANTS
# =================================================================================================

# The asset type can be determined from the 6th bit of the most significant element of an asset.
const.FUNGIBLE_BITMASK_U32=0x20 # 0b10_0000

# PROCEDURES
# =================================================================================================

#! Builds a fungible asset for the specified fungible faucet and amount.
#!
#! Inputs:  [faucet_id_hi, faucet_id_lo, amount]
#! Outputs: [ASSET]
#!
#! Where:
#! - faucet_id is the faucet to create the asset for.
#! - amount is the amount of the asset to create.
#! - ASSET is the built fungible asset.
#!
#! Annotation hint: is not used anywhere except this file
export.build_fungible_asset
    # assert the faucet is a fungible faucet
    dup exec.account::is_fungible_faucet assert.err=ERR_FUNGIBLE_ASSET_PROVIDED_FAUCET_ID_IS_INVALID
    # => [faucet_id_hi, faucet_id_lo, amount]

    # assert the amount is valid
    dup.2 exec.get_fungible_asset_max_amount lte 
    assert.err=ERR_FUNGIBLE_ASSET_AMOUNT_EXCEEDS_MAX_ALLOWED_AMOUNT
    # => [faucet_id_hi, faucet_id_lo, amount]

    # create the asset
    push.0 movdn.2
    # => [ASSET]
end

#! Creates a fungible asset for the faucet the transaction is being executed against.
#!
#! Inputs:  [amount]
#! Outputs: [ASSET]
#!
#! Where:
#! - amount is the amount of the asset to create.
#! - ASSET is the created fungible asset.
#!
#! Invocation: exec
export.create_fungible_asset
    # fetch the id of the faucet the transaction is being executed against.
    exec.account::get_id
    # => [id_hi, id_lo, amount]

    # build the fungible asset
    exec.build_fungible_asset
    # => [ASSET]
end

#! Builds a non fungible asset for the specified non-fungible faucet and amount.
#!
#! Inputs:  [faucet_id_hi, DATA_HASH]
#! Outputs: [ASSET]
#!
#! Where:
#! - faucet_id is the faucet to create the asset for.
#! - DATA_HASH is the data hash of the non-fungible asset to build.
#! - ASSET is the built non-fungible asset.
#!
#! Annotation hint: is not used anywhere except this file
export.build_non_fungible_asset
    # assert the faucet is a non-fungible faucet
    dup exec.account::is_non_fungible_faucet 
    assert.err=ERR_NON_FUNGIBLE_ASSET_PROVIDED_FAUCET_ID_IS_INVALID
    # => [faucet_id_hi, DATA_HASH]

    # build the asset
    movup.3 drop movdn.2
    # => [hash3, hash2, faucet_id_hi, hash0]

    # disassemble hash3 into u32 limbs
    u32split swap dup
    # => [hash3_lo, hash3_lo, hash3_hi, hash3, hash2, faucet_id_hi, hash0]

    # set the fungible bit to 0
    push.FUNGIBLE_BITMASK_U32 u32and u32xor
    # => [hash3_lo', hash3_hi, hash3, hash2, faucet_id_hi, hash0]

    # reassemble hash3 felt by multiplying the high part with 2^32 and adding the lo part
    swap push.0x0100000000 mul add
    # => [ASSET]
end

#! Creates a non-fungible asset for the faucet the transaction is being executed against.
#!
#! Inputs:  [DATA_HASH]
#! Outputs: [ASSET]
#!
#! Where:
#! - DATA_HASH is the data hash of the non-fungible asset to create.
#! - ASSET is the created non-fungible asset.
#!
#! Invocation: exec
export.create_non_fungible_asset
    # get the id of the faucet the transaction is being executed against
    exec.account::get_id swap drop
    # => [faucet_id_hi, DATA_HASH]

    # build the non-fungible asset
    exec.build_non_fungible_asset
    # => [ASSET]
end

# PROCEDURES COPIED FROM KERNEL (TODO: get rid of this duplication)
# =================================================================================================

const.FUNGIBLE_ASSET_MAX_AMOUNT=9223372036854775807

#! Returns the maximum amount of a fungible asset.
#!
#! Stack: []
#! Outputs: [fungible_asset_max_amount]
#!
#! fungible_asset_max_amount is the maximum amount of a fungible asset.
export.get_fungible_asset_max_amount
    push.FUNGIBLE_ASSET_MAX_AMOUNT
    # => [fungible_asset_max_amount]
end