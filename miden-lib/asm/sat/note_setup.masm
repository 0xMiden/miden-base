use.miden::sat::utils

# MEMORY OFFSETS
# =================================================================================================

# BOOK KEEPING
# -------------------------------------------------------------------------------------------------

# A pointer to the memory address at which a pointer to the current consumed note is stored.
const.CURRENT_CONSUMED_NOTE_PTR=3

# The offset at which a consumed notes hash is stored relative to the start of its data segment.
const.CONSUMED_NOTE_INPUTS_HASH_OFFSET=3

# NOTE SETUP SCRIPT
# =================================================================================================

#! Reads the inputs hash for the current consumed note from memory.
#!
#! Stack: []
#! Output: [inputs_hash]
#!
#! inputs_hash is the sequential hash of the inputs of the current consumed note.
proc.get_current_note_inputs_hash
    padw push.CURRENT_CONSUMED_NOTE_PTR mem_load
    push.CONSUMED_NOTE_INPUTS_HASH_OFFSET add mem_loadw
end

#! Prepares the virtual machine for execution of a consumed note.  This involves:
#! 1. Updating the current consumed note pointer.
#! 2. Loading the note inputs from the advice provider.
#! 3. Authenticating the note inputs against the inputs hash stored in memory.
#!
#! Stack: [idx]
#! Outputs: [i15, i14, ..., i0]
#!
#! idx is the index of the consumed note.
#! i15, i14, ..., i0 are the inputs of the consumed note.
export.prepare_note.4
    # convert the consumed note index to a pointer and store in memory
    exec.utils::consumed_note_data_ptr push.CURRENT_CONSUMED_NOTE_PTR mem_store

    # load the note inputs from the advice provider
    # TODO: optimize this to load items directly onto the stack.
    locaddr.0 padw padw padw adv_pipe adv_pipe

    # extract inputs hash and assert it matches commitment stored in memory
    dropw swapw dropw
    exec.get_current_note_inputs_hash
    assert_eqw

    # read the note inputs onto the stack
    padw loc_loadw.0
    padw loc_loadw.1
    padw loc_loadw.2
    padw loc_loadw.3
end
