use.miden::sat::layout

# NOTE SETUP SCRIPT
# =================================================================================================

#! Reads and returns the inputs hash for the consumed note being executed.
#!
#! Stack: []
#! Output: [inputs_hash]
#!
#! inputs_hash is the sequential hash of the inputs of the consumed note being executed.
proc.get_current_note_inputs_hash
    exec.layout::get_current_consumed_note_ptr
    exec.layout::get_consumed_note_inputs_hash
end

#! Prepares the virtual machine for execution of a consumed note.  This involves:
#! 1. Updating the current consumed note pointer.
#! 2. Loading the note inputs from the advice provider.
#! 3. Authenticating the note inputs against the inputs hash stored in memory.
#!
#! Stack: [idx]
#! Output: [i15, i14, ..., i0]
#!
#! idx is the index of the consumed note.
#! i15, i14, ..., i0 are the inputs of the consumed note.
export.prepare_note.4
    # convert the index of the consumed note being executed to a pointer and store in memory
    exec.layout::get_consumed_note_ptr 
    exec.layout::set_current_consumed_note_ptr

    # load the note inputs from the advice provider
    # TODO: optimize this to load items directly onto the stack.
    locaddr.0 padw padw padw adv_pipe adv_pipe

    # extract inputs hash and assert it matches commitment stored in memory
    dropw swapw dropw
    exec.get_current_note_inputs_hash
    assert_eqw

    # read the note inputs onto the stack
    padw loc_loadw.0
    padw loc_loadw.1
    padw loc_loadw.2
    padw loc_loadw.3
end
