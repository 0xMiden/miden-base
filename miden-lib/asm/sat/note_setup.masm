use.miden::sat::layout
use.miden::sat::note

# NOTE SETUP SCRIPT
# =================================================================================================

#! Prepares the virtual machine for execution of a consumed note.  This involves:
#! 1. Updating the current consumed note index and pointer.
#! 2. Loading the note inputs from the advice provider.
#! 3. Authenticating the note inputs against the inputs hash stored in memory.
#!
#! Stack: []
#! Output: [i15, i14, ..., i0]
#!
#! i15, i14, ..., i0 are the inputs of the consumed note.
export.prepare_note.4
    # load the note index onto the stack
    exec.note::increment_current_consumed_note_idx
    # => [idx, ...]

    # if the note index is not zero we must clear the previous notes outputs from the stack
    dup eq.0 not
    if.true
        dropw dropw dropw dropw
    end
    # => [idx]

    # convert the index of the consumed note being executed to a pointer and store in memory
    exec.layout::get_consumed_note_ptr
    # => [note_ptr]

    # set current consumed note pointer to the note being executed
    dup exec.layout::set_current_consumed_note_ptr
    # => [note_ptr]

    # load the note inputs on to the advice stack
    exec.layout::get_consumed_note_inputs_hash adv.push_mapval
    # => [INPUTS_HASH]

    # load the note inputs from the advice provider
    # TODO: optimize this to load items directly onto the stack.
    locaddr.0 padw padw padw adv_pipe hperm adv_pipe hperm
    # => [PERM, PERM, PERM, addr', INPUTS_HASH]

    # extract inputs hash and assert it matches commitment stored in memory
    dropw swapw dropw movup.4 drop
    # => [DIG, INPUTS_HASH]

    # assert the inputs hash matches the commitment stored in memory
    assert_eqw
    # => []

    # read the note inputs onto the stack
    padw loc_loadw.0
    padw loc_loadw.1
    padw loc_loadw.2
    padw loc_loadw.3
    # => [i15, i14, ..., i0]
end
