use.miden::sat::account
use.miden::sat::asset
use.miden::sat::constants
use.miden::sat::epilogue
use.miden::sat::layout

#! Returns the block hash of the last known block at the time of transaction execution.
#!
#! Inputs: []
#! Outputs: [H]
#!
#! H is the last known block hash.
export.get_block_hash
    exec.layout::get_blk_hash
end

#! Returns the block number of the last known block at the time of transaction execution.
#!
#! Inputs: []
#! Outputs: [num]
#!
#! num is the last known block number.
export.get_block_number
    exec.layout::get_blk_num
end

#! Returns the input notes hash. This is computed as a sequential hash of (nullifier, script_root)
#! tuples over all input notes.
#!
#! Inputs: []
#! Outputs: [COM]
#!
#! COM is the input notes hash.
export.get_input_notes_hash
    exec.layout::get_nullifier_com
end

#! Returns the output notes hash. This is computed as a sequential hash of (note_hash, note_metadata)
#! tuples over all output notes.
#!
#! Inputs: []
#! Outputs: [COM]
#!
#! COM is the output notes hash.
export.get_output_notes_hash
    exec.epilogue::process_created_notes
end

#! Increments the number of created notes by one. Returns the index of the next note to be created.
#!
#! Inputs: []
#! Outputs: [note_idx]
proc.increment_num_created_notes
    # get the current number of created notes
    exec.layout::get_num_created_notes
    # => [note_idx]

    # assert that there is space for a new note
    dup exec.constants::get_max_num_created_notes lt assert
    # => [note_idx]

    # increment the number of created notes
    dup add.1 exec.layout::set_num_created_notes
    # => [note_idx]
end

#! Creates a new note and returns a pointer to the memory address at which the note is stored.
#!
#! Inputs: [ASSET, tag, RECIPIENT]
#! Outputs: [ptr]
#!
#! ASSET is the asset to be included in the note.
#! tag is the tag to be included in the note.
#! RECIPIENT is the recipient of the note.
#! ptr is the pointer to the memory address at which the note is stored.
export.create_note
    # validate the asset
    exec.asset::validate_asset
    # => [ASSET, tag, RECIPIENT]

    # get the index for the next note to be created and increment counter
    exec.increment_num_created_notes
    # => [note_idx, ASSET, tag, RECIPIENT]

    # get a pointer to the memory address at which the note will be stored
    exec.layout::get_created_note_ptr
    # => [note_ptr, ASSET, tag, RECIPIENT]

    # populate the metadata
    push.1 movup.6 exec.account::get_id push.0
    # => [1, acct_id, tag, 0, note_ptr, ASSET,  RECIPIENT]

    # set the metadata for the new created note
    dup.4 exec.layout::set_created_note_metadata
    # => [note_ptr, ASSET, RECIPIENT]

    # add the asset to the note
    dup movdn.5 exec.layout::get_created_note_asset_data_ptr mem_storew dropw
    # => [note_ptr, RECIPIENT]

    # set the recipient
    dup movdn.5 exec.layout::set_created_note_recipient
    # => [note_ptr]
end
