use.miden::sat::constants

# MEMORY ADDRESS CONSTANTS
# =================================================================================================

# BOOK KEEPING
# -------------------------------------------------------------------------------------------------

# The memory address at which the transaction vault root is stored
const.TX_VAULT_ROOT_PTR=0

# The memory address at which the number of executed notes is stored
const.NUM_EXECUTED_NOTES_PTR=1

# The memory address at which the number of created notes is stored.
const.NUM_CREATED_NOTES_PTR=2

# The memory address at which a pointer to the consumed note being executed is stored.
const.CURRENT_CONSUMED_NOTE_PTR=3

# GLOBAL INPUTS
# -------------------------------------------------------------------------------------------------

# The memory address at which the global inputs section begins
const.GLOBAL_INPUTS_SECTION_OFFSET=10

# The memory address at which the latest known block hash is stored
const.BLK_HASH_PTR=10

# The memory address at which the account id is stored
const.ACCT_ID_PTR=11

# The memory address at which the initial account hash is stored
const.INIT_ACCT_HASH_PTR=12

# The memory address at which the global nullifier commitment is stored
const.NULLIFIER_COM_PTR=13

# The memory address at which the initial nonce is stored
const.INIT_NONCE_PTR=14

# ACCOUNT DATA
# -------------------------------------------------------------------------------------------------

# The memory address at which the account data section begins
const.ACCT_DATA_SECTION_OFFSET=100

# The memory address at which the account id and nonce is stored.
# The account id is stored in the first element.
# The account nonce is stored in the fourth element.
const.ACCT_ID_AND_NONCE_PTR=100

# The memory address at which the account vault root is stored
const.ACCT_VAULT_ROOT_PTR=101

# The memory address at which the account storage root is stored
const.ACCT_STORAGE_ROOT_PTR=102

# The memory address at which the account code root is stored
const.ACCT_CODE_ROOT_PTR=103

# CONSUMED NOTES DATA
# -------------------------------------------------------------------------------------------------

# The memory address at which the consumed note section begins
const.CONSUMED_NOTE_SECTION_OFFSET=1000

# The memory address at which the number of consumed notes is stored
const.CONSUMED_NOTE_NUM_PTR=1000

# The offsets at which data of a consumed note is stored relative to the start of its data segment
const.CONSUMED_NOTE_HASH_OFFSET=0
const.CONSUMED_NOTE_SERIAL_NUM_OFFSET=1
const.CONSUMED_NOTE_SCRIPT_ROOT_OFFSET=2
const.CONSUMED_NOTE_INPUTS_HASH_OFFSET=3
const.CONSUMED_NOTE_VAULT_ROOT_OFFSET=4
const.CONSUMED_NOTE_NUM_ASSETS_OFFSET=5
const.CONSUMED_NOTE_ASSETS_OFFSET=6

# CREATED NOTES
# -------------------------------------------------------------------------------------------------

# The memory address at which the created notes section begins.
const.CREATED_NOTE_SECTION_OFFSET=10000

# The offsets at which data of a created note is stored relative to the start of its data segment.
const.CREATED_NOTE_HASH_OFFSET=0
const.CREATED_NOTE_META_OFFSET=1
const.CREATED_NOTE_RECIPIENT_OFFSET=2
const.CREATED_NOTE_VAULT_HASH_OFFSET=3
const.CREATED_NOTE_NUM_ASSETS_OFFSET=4
const.CREATED_NOTE_ASSETS_OFFSET=5

# MEMORY PROCEDURES
# =================================================================================================

# BOOK KEEPING
# -------------------------------------------------------------------------------------------------

#! Returns the number of created notes.
#!
#! Stack: []
#! Output: [num_created_notes]
export.get_num_created_notes
    push.NUM_CREATED_NOTES_PTR mem_load
end

#! Returns a pointer to the consumed note being executed.
#!
#! Stack: []
#! Output: [ptr]
export.get_current_consumed_note_ptr
    push.CURRENT_CONSUMED_NOTE_PTR mem_load
end

#! Sets the current consumed note pointer to the consumed note being executed.
#!
#! Stack: [ptr]
#! Output: []
export.set_current_consumed_note_ptr
    push.CURRENT_CONSUMED_NOTE_PTR mem_store
end

# GLOBAL INPUTS
# -------------------------------------------------------------------------------------------------

#! Sets the block hash of the last known block at the time of transaction execution.
#!
#! Stack: [BH]
#! Output: []
#!
#! - BH is the block hash of the last known block at the time of transaction execution.
export.set_blk_hash
    push.BLK_HASH_PTR mem_storew dropw
end

#! Sets the account id.
#!
#! Stack: [acct_id]
#! Output: []
#!
#! - acct_id is the account id.
export.set_global_acct_id
    push.ACCT_ID_PTR mem_store
end

#! Returns the global account id.
#!
#! Stack: []
#! Output: [acct_id]
#!
#! - acct_id is the account id.
export.get_global_acct_id
    push.ACCT_ID_PTR mem_load
end

#! Sets the initial account hash.
#!
#! Stack: [INIT_ACCT_HASH]
#! Output: []
#!
#! - INIT_ACCT_HASH is the initial account hash.
export.set_init_acct_hash
    push.INIT_ACCT_HASH_PTR mem_storew dropw
end

#! Returns the initial account hash.
#!
#! Stack: []
#! Output: [INIT_ACCT_HASH]
#!
#! - INIT_ACCT_HASH is the initial account hash.
export.get_init_acct_hash
    padw push.INIT_ACCT_HASH_PTR mem_loadw
end

#! Returns the nullifier commitment.
#!
#! Stack: []
#! Output: [COM]
#!
#! - COM is the nullifier commitment.
export.get_nullifier_com
    padw push.NULLIFIER_COM_PTR mem_loadw
end

#! Sets the nullifier commitment.
#!
#! Stack: [COM]
#! Output: []
#!
#! - COM is the nullifier commitment.
export.set_nullifier_com
    push.NULLIFIER_COM_PTR mem_storew dropw
end

#! Returns the initial account nonce.
#!
#! Stack: []
#! Output: [init_nonce]
#!
#! - init_nonce is the initial account nonce.
export.get_init_nonce
    push.INIT_NONCE_PTR mem_load
end

#! Sets the initial account nonce.
#!
#! Stack: [init_nonce]
#! Output: []
#!
#! - init_nonce is the initial account nonce.
export.set_init_nonce
    push.INIT_NONCE_PTR mem_store
end

# ACCOUNT DATA
# -------------------------------------------------------------------------------------------------

#! Returns a pointer to the account data.
#!
#! Stack: []
#! Output: [ptr]
#!
#! - ptr is the memory address at which the account data begins.
export.get_acct_data_ptr
    push.ACCT_DATA_SECTION_OFFSET
end

#! Returns the account id.
#!
#! Stack: []
#! Output: [acct_id]
#!
#! - acct_id is the account id.
export.get_acct_id
    push.ACCT_ID_AND_NONCE_PTR mem_load
end

#! Returns the account nonce.
#!
#! Stack: []
#! Output: [acct_nonce]
#!
#! - acct_nonce is the account nonce.
export.get_acct_nonce
    padw push.ACCT_ID_AND_NONCE_PTR mem_loadw
    movdn.3 drop drop drop
end

#! Sets the account nonce.
#!
#! Stack: [acct_nonce]
#! Output: []
#!
#! - acct_nonce is the account nonce.
export.set_acct_nonce
    padw push.ACCT_ID_AND_NONCE_PTR mem_loadw
    drop movup.3 push.ACCT_ID_AND_NONCE_PTR mem_storew dropw
end

# CONSUMED NOTES
# -------------------------------------------------------------------------------------------------

#! Sets the total number of consumed notes in the transaction.
#!
#! Stack: [num_consumed_notes]
#! Output: []
#!
#! - num_consumed_notes is the total number of consumed notes in the transaction.
export.set_total_num_consumed_notes
    push.CONSUMED_NOTE_NUM_PTR mem_store
end

#! Computes a pointer to the memory address at which the data associated with a consumed note with
#! index i is stored.
#!
#! Stack: [i]
#! Output: [ptr]
#!
#! - i is the index of the consumed note.
#! - ptr is the memory address of the data segment for consumed note i.
export.get_consumed_note_ptr
    add.1 exec.constants::get_note_mem_size mul push.CONSUMED_NOTE_SECTION_OFFSET add
end

#! Computes a pointer to the memory address at which the nullifier associated a note with index i
#! is stored.
#!
#! Stack: [i]
#! Output: [ptr]
#!
#! - i is the index of the consumed note.
#! - ptr is the nullifier memory address for note i.
export.get_consumed_note_nullifier_ptr
    push.CONSUMED_NOTE_SECTION_OFFSET.1 add add
end

#! Returns the nullifier of a consumed note with index i.
#!
#! Stack: [i]
#! Output: [nullifier]
#!
#! - i is the index of the consumed note.
#! - nullifier is the nullifier of the consumed note.
export.get_consumed_note_nullifier
    padw movup.4 push.CONSUMED_NOTE_SECTION_OFFSET.1 add add mem_loadw
end

#! Returns the script root of a consumed note located at the specified memory address.
#!
#! Stack: [consumed_note_ptr]
#! Output: [R]
#!
#! - consumed_note_ptr is the memory address at which the consumed note data begins.
#! - R is the script root of the consumed note.
export.get_consumed_note_script_root
    padw
    movup.4 push.CONSUMED_NOTE_SCRIPT_ROOT_OFFSET add
    mem_loadw
end

#! Returns the inputs hash of a consumed note located at the specified memory address.
#!
#! Stack: [consumed_note_ptr]
#! Output: [I]
#!
#! - consumed_note_ptr is the memory address at which the consumed note data begins.
#! - I is the inputs hash of the consumed note.
export.get_consumed_note_inputs_hash
    padw
    movup.4 push.CONSUMED_NOTE_INPUTS_HASH_OFFSET add
    mem_loadw
end

# CREATED NOTES
# -------------------------------------------------------------------------------------------------

#! Computes a pointer to the memory address at which the data associated with a created note with
#! index i is stored.
#!
#! Stack: [i]
#! Output: [ptr]
#!
#! - i is the index of the created note.
#! - ptr is the memory address of the data segment for created note i.
export.get_created_note_ptr
    exec.constants::get_note_mem_size mul push.CREATED_NOTE_SECTION_OFFSET add
end

#! Returns the created note recipient
#!
#! Stack: [created_note_data_ptr]
#! Output: [R]
#!
#! - created_note_data_ptr is the memory address at which the created note data begins.
#! - R is the recipient of the created note.
export.get_created_note_recipient
    padw
    movup.4 push.CREATED_NOTE_RECIPIENT_OFFSET add
    mem_loadw
end

#! Returns the number of assets in the created note
#!
#! Stack: [created_note_data_ptr]
#! Output: [num_assets]
#!
#! - created_note_data_ptr is the memory address at which the created note data begins.
#! - num_assets is the number of assets in the created note.
export.get_created_note_num_assets
    push.CREATED_NOTE_NUM_ASSETS_OFFSET add mem_load
end

#! Returns a pointer to the created note asset data
#!
#! Stack: [created_note_data_ptr]
#! Output: [asset_data_ptr]
#!
#! - created_note_data_ptr is the memory address at which the created note data begins.
#! - asset_data_ptr is the memory address at which the created note asset data begins.
export.get_created_note_asset_data_ptr
    push.CREATED_NOTE_ASSETS_OFFSET add
end

#! Sets the created note vault hash
#!
#! Stack: [created_note_data_ptr, V]
#! Output: []
#!
#! - created_note_data_ptr is the memory address at which the created note data begins.
#! - V is the vault hash of the created note.
export.set_created_note_vault_hash
    push.CREATED_NOTE_VAULT_HASH_OFFSET add mem_storew
end
