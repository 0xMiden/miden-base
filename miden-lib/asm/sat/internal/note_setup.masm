use.miden::sat::internal::layout
use.miden::sat::internal::note

# NOTE SETUP SCRIPT
# =================================================================================================

#! Prepares the virtual machine for execution of a consumed note.  This involves:
#! 1. Updating the current consumed note index and pointer.
#! 2. Loading the note inputs from the advice provider.
#! 3. Authenticating the note inputs against the inputs hash stored in memory.
#!
#! Stack: [WORD, WORD, WORD, WORD]
#! Output: [i15, i14, ..., i0]
#!
#! - WORD are words whose contents are dependent on the invocation count of the `prepare_note` 
#!   procedure as described below:
#!       - When the prepare_note procedure is called for the first time, the WORD is an empty
#!         word from padding in the prologue.
#!       - If the prepare_note procedure is called any time after the first invocation the 
#!         contents of WORD will be the outputs of the previous note.
#! - i15, i14, ..., i0 are the inputs of the consumed note.
export.prepare_note.4
    # load the note index onto the stack
    exec.note::increment_current_consumed_note_idx
    # => [idx, WORD, WORD, WORD, WORD]

    # convert the index of the consumed note being executed to a pointer and store in memory
    exec.layout::get_consumed_note_ptr
    # => [note_ptr, WORD, WORD, WORD, WORD]

    # set current consumed note pointer to the note being executed
    dup exec.layout::set_current_consumed_note_ptr
    # => [note_ptr, WORD, WORD, WORD, WORD]

    # load the note inputs on to the advice stack
    exec.layout::get_consumed_note_inputs_hash adv.push_mapval
    # => [INPUTS_HASH, WORD, WORD, WORD, WORD]

    # prepare stack for inputs ingestion
    movdnw.2 dropw dropw movdnw.2 padw movdnw.2 locaddr.0 movdn.12
    # => [WORD, WORD, ZERO, addr, INPUTS_HASH]

    # load the note inputs from the advice provider
    # TODO: optimize this to load items directly onto the stack.
    adv_pipe hperm adv_pipe hperm
    # => [PERM, PERM, PERM, addr', INPUTS_HASH]

    # extract inputs hash and assert it matches commitment stored in memory
    dropw swapw dropw movup.4 drop
    # => [DIG, INPUTS_HASH]

    # assert the inputs hash matches the commitment stored in memory
    assert_eqw
    # => []

    # read the note inputs onto the stack
    padw loc_loadw.0
    padw loc_loadw.1
    padw loc_loadw.2
    padw loc_loadw.3
    # => [i15, i14, ..., i0]
end
