use.miden::sat::internal::account
use.miden::sat::internal::asset_vault
use.miden::sat::internal::layout
use.miden::sat::internal::note
use.miden::sat::internal::tx

#! Returns the account id.
#!
#! Stack: [0]
#! Output: [acct_id]
#!
#! - acct_id is the account id.
export.get_account_id
    exec.account::get_id
    # => [acct_id, 0]

    swap drop
    # => [acct_id]
end

#! Returns the account nonce.
#!
#! Stack: [0]
#! Output: [nonce]
#!
#! - nonce is the account nonce.
export.get_account_nonce
    exec.account::get_nonce
    # => [0, nonce]

    swap drop
    # => [nonce]
end

#! Returns the initial account hash.
#!
#! Stack: [0, 0, 0, 0]
#! Output: [H]
#!
#! - H is the initial account hash.
export.get_initial_account_hash
    exec.account::get_initial_hash
    # => [H, 0, 0, 0, 0]

    swapw dropw
    # => [H]
end

#! Computes and returns the account hash from account data stored in memory.
#!
#! Stack: [0, 0, 0, 0]
#! Output: [ACCT_HASH]
#!
#! - ACCT_HASH is the hash of the account data.
export.get_current_account_hash
    exec.account::get_current_hash
    # => [ACCT_HASH, 0, 0, 0, 0]

    swapw dropw
    # => [ACCT_HASH]
end

#! Increments the account nonce by the provided value.
#!
#! Stack: [value]
#! Output: [0]
#!
#! - value is the value to increment the nonce by. value can be at most 2^32 - 1 otherwise this
#!   procedure panics.
export.incr_account_nonce
    # AUTHENTICATION
    # ---------------------------------------------------------------------------------------------
    # get the hash of the caller
    padw caller
    # => [CALLER, value]

    # make sure the caller is a part of the account interface
    exec.account::authenticate_procedure
    # => [CALLER, value]

    # drop the caller
    dropw
    # => [value]

    # KERNEL LOGIC
    # ---------------------------------------------------------------------------------------------

    push.0 swap
    # => [value, 0]

    exec.account::incr_nonce
    # => [0]
end

#! Gets an item from the account storage. Panics if the index is out of bounds.
#!
#! Stack: [index, 0, 0, 0]
#! Output: [VALUE]
#!
#! - index is the index of the item to get.
#! - VALUE is the value of the item.
export.get_account_item
    exec.account::get_item
    # => [VALUE, 0, 0, 0]

    movup.4 drop movup.4 drop movup.4 drop
    # => [VALUE]
end

#! Sets an item in the account storage. Panics if the index is out of bounds.
#!
#! Stack: [index, V', 0, 0, 0]
#! Output: [R', V]
#!
#! - index is the index of the item to set.
#! - V' is the value to set.
#! - V is the previous value of the item.
#! - R' is the new storage root.
export.set_account_item
    # AUTHENTICATION
    # ---------------------------------------------------------------------------------------------
    # get the hash of the caller
    padw caller
    # => [CALLER, index, V', 0, 0, 0]

    # make sure the caller is a part of the account interface
    exec.account::authenticate_procedure
    # => [CALLER, index, V', 0, 0, 0]

    # drop the caller
    dropw
    # => [index, V', 0, 0, 0]

    # KERNEL LOGIC
    # ---------------------------------------------------------------------------------------------
    exec.account::set_item
    # => [R', V, 0, 0, 0]

    movup.8 drop movup.8 drop movup.8 drop
    # => [R', V]
end

#! Sets the code of the account the transaction is being executed against. This procedure can only
#! executed on regular accounts with updatable code. Otherwise, this procedure fails.
#!
#! Stack: [CODE_ROOT]
#! Output: [0, 0, 0, 0]
#!
#! - CODE_ROOT is the hash of the code to set.
export.set_account_code
    # AUTHENTICATION
    # ---------------------------------------------------------------------------------------------
    # get the hash of the caller
    padw caller
    # => [CALLER, value]

    # make sure the caller is a part of the account interface
    exec.account::authenticate_procedure
    # => [CALLER, value]

    # drop the caller
    dropw
    # => [value]

    # KERNEL LOGIC
    # ---------------------------------------------------------------------------------------------
    padw swapw
    # => [CODE_ROOT, 0, 0, 0, 0]

    exec.account::set_code
    # => [0, 0, 0, 0]
end

# TODO: Add vault based procedures (mint, burn)

#! Returns the balance of a fungible asset associated with a faucet_id.
#! Panics if the asset is not a fungible asset.
#!
#! Stack: [faucet_id]
#! Output: [balance]
#!
#! - faucet_id is the faucet id of the fungible asset of interest.
#! - balance is the vault balance of the fungible asset.
export.account_vault_get_balance
    exec.layout::get_acct_vault_root_ptr swap
    # => [faucet_id, acct_vault_root_ptr]

    exec.asset_vault::get_balance
    # => [balance]
end

#! Returns a boolean indicating whether the non-fungible asset is present in the vault.
#! Panics if the ASSET is a fungible asset.
#!
#! Stack: [ASSET]
#! Output: [has_asset, 0, 0, 0]
#!
#! - ASSET is the non-fungible asset of interest
#! - has_asset is a boolean indicating whether the account vault has the asset of interest
export.account_vault_has_non_fungible_asset
    push.0 movdn.4 push.0 movdn.4 push.0 movdn.4 exec.layout::get_acct_vault_root_ptr movdn.4
    # => [ASSET, 0, 0, 0]

    exec.asset_vault::has_non_fungible_asset
    # => [has_asset, 0, 0, 0]
end

#! Add the specified asset to the vault.
#!
#! Panics:
#! - If the asset is not valid.
#! - If the total value of two fungible assets is greater than or equal to 2^63.
#! - If the vault already contains the same non-fungible asset.
#!
#! Stack: [ASSET]
#! Output: [ASSET']
#!
#! - ASSET is the asset to add to the vault.
#! - ASSET' final asset in the account vault defined as follows:
#!   - If ASSET is a non-fungible asset, then ASSET' is the same as ASSET.
#!   - If ASSET is a fungible asset, then ASSET' is the total fungible asset in the account vault
#!     after ASSET was added to it.
export.account_vault_add_asset
    # AUTHENTICATION
    # ---------------------------------------------------------------------------------------------
    # get the hash of the caller
    padw caller
    # => [CALLER, ASSET]

    # make sure the caller is a part of the account interface
    exec.account::authenticate_procedure
    # => [CALLER, ASSET]

    # drop the caller
    dropw
    # => [ASSET]

    # KERNEL LOGIC
    # ---------------------------------------------------------------------------------------------
    exec.layout::get_acct_vault_root_ptr movdn.4
    # => [ASSET, acct_vault_root_ptr]

    exec.asset_vault::add_asset
    # => [ASSET']
end

#! Remove the specified asset from the vault.
#!
#! Panics:
#! - The fungible asset is not found in the vault.
#! - The amount of the fungible asset in the vault is less than the amount to be removed.
#! - The non-fungible asset is not found in the vault.
#!
#! Stack: [ASSET]
#! Output: [ASSET]
#!
#! - ASSET is the asset to remove from the vault.
export.account_vault_remove_asset
    # AUTHENTICATION
    # ---------------------------------------------------------------------------------------------
    # get the hash of the caller
    padw caller
    # => [CALLER, ASSET]

    # make sure the caller is a part of the account interface
    exec.account::authenticate_procedure
    # => [CALLER, ASSET]

    # drop the caller
    dropw
    # => [ASSET]

    # KERNEL LOGIC
    # ---------------------------------------------------------------------------------------------
    exec.layout::get_acct_vault_root_ptr movdn.4
    # => [ASSET, acct_vault_root_ptr]

    exec.asset_vault::remove_asset
    # => [ASSET]
end

#! Returns the number of assets and vault hash of the note currently being processed. Panics if a
#! note is not being processed.
#!
#! Inputs: [0, 0, 0, 0, 0]
#! Outputs: [VAULT_HASH, num_assets]
#!
#! - num_assets is the number of assets in the note currently being processed.
#! - VAULT_HASH is the vault hash of the note currently being processed.
export.get_note_vault_info
    exec.note::get_vault_info
    # => [VAULT_HASH, num_assets, 0, 0, 0, 0, 0]

    movup.5 drop movup.5 drop movup.5 drop movup.5 drop movup.5 drop
    # => [VAULT_HASH, num_assets]
end

#! Returns the sender of the note currently being processed. Panics if a note is not being
#! processed.
#!
#! Inputs: [0]
#! Outputs: [sender]
#!
#! - sender is the sender of the note currently being processed.
export.get_note_sender
    exec.note::get_sender
    # => [sender, 0]

    swap drop
    # => [sender]

end

#! Returns the block number of the last known block at the time of transaction execution.
#!
#! Inputs: [0]
#! Outputs: [num]
#!
#! num is the last known block number.
export.get_block_number
    exec.tx::get_block_number
    # => [num, 0]

    swap drop
    # => [num]
end

#! Returns the block hash of the last known block at the time of transaction execution.
#!
#! Inputs: [0, 0, 0, 0]
#! Outputs: [H]
#!
#! H is the last known block hash.
export.get_block_hash
    exec.tx::get_block_hash
    # => [H, 0, 0, 0, 0]

    swapw dropw
    # => [H]
end

#! Returns the input notes hash. This is computed as a sequential hash of (nullifier, script_root)
#! tuples over all input notes.
#!
#! Inputs: [0, 0, 0, 0]
#! Outputs: [COM]
#!
#! COM is the input notes hash.
export.get_input_notes_hash
    exec.tx::get_input_notes_hash
    # => [COM, 0, 0, 0, 0]

    swapw dropw
    # => [COM]
end

#! Returns the output notes hash. This is computed as a sequential hash of (note_hash, note_metadata)
#! tuples over all output notes.
#!
#! Inputs: [0, 0, 0, 0]
#! Outputs: [COM]
#!
#! COM is the output notes hash.
export.get_output_notes_hash
    exec.tx::get_output_notes_hash
    # => [COM, 0, 0, 0, 0]

    swapw dropw
    # => [COM]
end

#! Creates a new note and returns a pointer to the memory address at which the note is stored.
#!
#! Inputs: [ASSET, tag, RECIPIENT]
#! Outputs: [ptr, 0, 0, 0, 0, 0, 0, 0, 0]
#!
#! ASSET is the asset to be included in the note.
#! tag is the tag to be included in the note.
#! RECIPIENT is the recipient of the note.
#! ptr is the pointer to the memory address at which the note is stored.
export.create_note
    exec.tx::create_note
end

#! Returns a commitment to the account vault the transaction is being executed against.
#!
#! Stack: [0, 0, 0, 0]
#! Outputs: [COM]
#!
#! - COM is the commitment to the account vault.
export.get_account_vault_commitment
    # fetch the account vault root from memory
    exec.layout::get_acct_vault_root
    # => [COM, 0, 0, 0, 0]

    # prepare the stack for return
    swapw dropw
    # => [COM]
end