use.miden::note
use.miden::contracts::wallets::basic->wallet

# Swap script: adds an asset from the note into consumers account and
# creates a note consumable by note issuer containing requested ASSET.
#
# Requires that the account exposes:
#
# Inputs: [SCRIPT_ROOT]
# Outputs: []
#
# Note inputs are assumed to be as follows:
# - RECIPIENT
# - ASSET
# - TAG = [tag, 0, 0, 0]
#
# FAILS if:
# - Account does not expose miden::contracts::wallets::basic::receive_asset procedure
# - Account does not expose miden::contracts::wallets::basic::send_asset procedure
# - Account vault does not contain the requested asset
# - Adding a fungible asset would result in amount overflow, i.e., the total amount would be
#   greater than 2^63
begin
    # drop the transaction script root
    dropw
    # => []

    # store asset into memory at address 3
    push.3 exec.note::get_assets assert
    # => [ptr]

    # load the asset and add it to the account
    mem_loadw call.wallet::receive_asset dropw
    # => []

    # store note inputs into memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is 9
    eq.9 assert
    # => [inputs_ptr]

    # load recipient
    drop padw mem_loadw
    # => [RECIPIENT]

    padw mem_loadw.1
    # => [ASSET, RECIPIENT]

    padw mem_loadw.2
    # => [0, 0, 0, tag, ASSET, RECIPIENT]

    drop drop drop movdn.4
    # => [ASSET, tag, RECIPIENT]

    # create a note using inputs
    call.wallet::send_asset dropw dropw
    # => []
end
