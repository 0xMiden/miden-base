use.miden::sat::account
use.miden::sat::note
use.miden::sat::tx

# Atomic Swap script: adds an asset from the note into consumers account and
# creates a note consumable by initial issuer containing requested ASSET.
#
# Requires that the account exposes: 
#
# Inputs: []
# Outputs: []
#
# Note inputs are assumed to be as follows:
#
# FAILS if:
begin
    # Process:
    # 1. Alice creates a note A containing ASSET X consumable by anyone
    # 2. Bob consumes note A receiving ASSET X
    # 3. Bob create a note B containing ASSET Y
    # 
    # Requirements:
    # - Anyone can consume note A
    # - Note B needs to contain ASSET Y initialy requested by Alice
    # - Only Alice can consume note B

    # drop the transaction script root
    dropw
    # => []

    # load the note inputs to memory starting at address 0
    push.0 exec.note::get_inputs
    # => [inputs_ptr] 
    
    # load the asset into the stack
    exec.get_assets drop mem_loadw
    # => [ASSET]

    # add asset to account
    exec.account::add_asset dropw
    # => []

    # TODO: I need more information on the organisation of my memory
    # and public / private inputs to make sure that I can access and
    # manipulate them correctly

    # Inputs: [ASSET, tag, RECIPIENT]
    # Need to push to the operand_stack the requested ASSET,
    # Tag and Recipient that has been pre-computed by initial note issuer
    # create new note
    exec.tx::create_note
    # => [ptr]
end