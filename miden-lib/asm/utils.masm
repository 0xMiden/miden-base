### ACCOUNT #########################################################

# Given the least significant 32 bits of an account id's first felt, this mask defines the bits used
# to determine the account type.
const.ACCOUNT_ID_TYPE_MASK_U32=0x30 # 0b11_0000

# Bit pattern for a fungible faucet w/ immutable code, after the account type mask has been applied.
const.FUNGIBLE_FAUCET_ACCOUNT=0x20 # 0b10_0000

# Bit pattern for a non-fungible faucet w/ immutable code, after the account type mask has been
# applied.
const.NON_FUNGIBLE_FAUCET_ACCOUNT=0x30 # 0b11_0000

#! Returns the most significant half with the account type bits masked out.
#!
#! The account type can be defined by comparing this value with the following constants:
#! - REGULAR_ACCOUNT_UPDATABLE_CODE
#! - REGULAR_ACCOUNT_IMMUTABLE_CODE
#! - FUNGIBLE_FAUCET_ACCOUNT
#! - NON_FUNGIBLE_FAUCET_ACCOUNT
#!
#! Inputs:  [acct_id_hi]
#! Outputs: [acct_type]
#!
#! Where:
#! - acct_id_hi is the first felt of the account id.
#! - acct_type is the account type.
proc.type
    u32split drop push.ACCOUNT_ID_TYPE_MASK_U32 u32and
    # => [acct_type]
end

#! Returns a boolean indicating whether the account is a fungible faucet.
#!
#! Inputs:  [acct_id]
#! Outputs: [is_fungible_faucet]
#!
#! Where:
#! - acct_id is the account id.
#! - is_fungible_faucet is a boolean indicating whether the account is a fungible faucet.
export.is_fungible_faucet
    exec.type push.FUNGIBLE_FAUCET_ACCOUNT eq
    # => [is_fungible_faucet]
end

#! Returns a boolean indicating whether the account is a non-fungible faucet.
#!
#! Inputs:  [acct_id]
#! Outputs: [is_non_fungible_faucet]
#!
#! Where:
#! - acct_id is the account id.
#! - is_non_fungible_faucet is a boolean indicating whether the account is a non-fungible faucet.
export.is_non_fungible_faucet
    exec.type push.NON_FUNGIBLE_FAUCET_ACCOUNT eq
    # => [is_non_fungible_faucet]
end

#! Returns a boolean indicating whether the given account_ids are equal.
#!
#! Inputs:  [acct_id_hi, acct_id_lo, other_acct_id_hi, other_acct_id_lo]
#! Outputs: [is_id_equal]
#!
#! Where:
#! - acct_id_{hi,lo} are the first and second felt of an account id.
#! - other_acct_id_{hi,lo} are the first and second felt of the other account id to compare against.
#! - is_id_equal is a boolean indicating whether the account ids are equal.
export.is_id_eq
    movup.2 eq
    # => [is_hi_equal, acct_id_lo, other_acct_id_lo]
    swap movup.2 eq
    # => [is_lo_equal, is_hi_equal]
    and
    # => [is_id_equal]
end

### ASSET ###########################################################

const.FUNGIBLE_ASSET_MAX_AMOUNT=9223372036854775807

#! Returns the maximum amount of a fungible asset.
#!
#! Inputs:  []
#! Outputs: [fungible_asset_max_amount]
#!
#! Where:
#! - fungible_asset_max_amount is the maximum amount of a fungible asset.
export.get_fungible_asset_max_amount
    push.FUNGIBLE_ASSET_MAX_AMOUNT
    # => [fungible_asset_max_amount]
end

### NOTE ############################################################

# The maximum number of input values associated with a single note.
const.MAX_INPUTS_PER_NOTE=128

#! Returns the max allowed number of input values per note.
#!
#! Inputs:  []
#! Outputs: [max_inputs_per_note]
#!
#! Where:
#! - max_inputs_per_note is the max inputs per note.
export.get_max_inputs_per_note
    push.MAX_INPUTS_PER_NOTE
end
